#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1336] =
    {   0,
        0,    0,  185,  185,    2,    2,  189,  187,    4,    4,
      187,  187,  176,  183,  176,  176,  180,  176,  176,  176,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  176,  185,  186,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  171,    0,    1,    0,
      178,  177,  180,  173,  172,  170,  169,  174,  168,  182,

      182,  182,  182,  182,  182,   12,  182,  182,  182,   19,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,   71,  182,  182,   74,   83,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  101,
      182,  182,  106,  109,  110,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  146,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  175,  185,  184,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      181,    0,  177,    5,  182,    7,  182,  182,   10,  182,

       13,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   34,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,   48,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,   59,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,   78,  182,  182,   86,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  102,  182,  182,
      182,  107,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  132,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  147,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  182,  182,  182,  182,  182,  182,  182,
      182,  182,   20,  182,   22,   23,   24,  182,  182,  182,
       29,  182,  182,  182,   32,   35,  182,  182,  182,  182,
      182,   41,  182,  182,  182,   46,   47,  182,  182,  182,
      182,  182,  182,  182,   56,  182,  182,  182,   61,   62,
      182,  182,   66,  182,   68,   69,  182,  182,  182,  182,

      182,  182,   82,  182,   85,   87,   88,  182,   90,  182,
      182,   93,  182,  182,  182,  182,  182,  104,  182,  182,
      182,  182,  113,  182,  182,  116,  182,  182,  182,  182,
      121,  182,  182,  182,  182,  126,  182,  182,  182,  182,
      134,  135,  182,  182,  182,  182,  182,  142,  143,  144,
      182,  149,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  159,  182,  161,  182,  163,  164,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    6,    8,  182,   11,  182,   15,  182,

      182,  182,  182,  182,  182,  182,  182,  182,   31,  182,
      182,  182,  182,  182,  182,   40,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,   55,   57,  182,  182,
      182,   64,  182,   70,   72,  182,   75,   76,  182,  182,
      182,  182,   89,   91,  182,   94,   95,  182,   98,  182,
      182,  182,  182,  111,  112,  182,  182,  182,  182,  182,
      120,  182,  182,  124,  182,  182,  182,  182,  133,  182,
      182,  182,  139,  182,  182,  182,  182,  182,  152,  182,
      182,  182,  156,  182,  182,  182,  162,  165,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  182,   14,  182,   17,  182,
      182,  182,   25,   27,  182,   30,  182,  182,  182,  182,

      182,   39,  182,   43,  182,   45,   49,   50,  182,   52,
      182,  182,  182,   60,   63,   65,   67,   73,   77,  182,
      182,  182,   84,   92,   96,   99,  182,  103,  182,  108,
      182,  182,  182,  182,  182,  122,  182,  182,  127,  129,
      131,  182,  137,  182,  140,  182,  182,  182,  182,  182,
      153,  154,  155,  157,  182,  182,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    9,
       16,   18,   21,  182,   26,   28,  182,  182,  182,   37,
       38,  182,  182,   51,   53,   54,  182,   79,  182,  182,
       97,  100,  182,  182,  182,  182,  118,  119,  182,  182,
      128,  130,  182,  138,  182,  182,  182,  182,  182,  158,
      160,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  182,    0,   33,  182,   42,
       44,  182,  182,   81,  105,  182,  182,  182,  123,  125,
      136,  182,  182,  182,  150,  182,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  182,
        0,  182,   58,   80,  182,  115,  117,  141,  145,  182,
      151,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,    0,    0,   36,  114,  182,
        2,    2,    2,    2,    2,    2,    0,    0,  166,  148,

        2,    2,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,  167,    2,    2,    0,    2,
        0,    2,  179,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1343] =
    {   0,
        0,    0,  804,  801,   76,    0,  807, 8775,  151,  153,
      782,    0, 8775, 8775,  149,  148,  160,  159,  161,  163,
      160,  160,  169,  214,  206,  259,  155,  167,  269,  156,
      175,  219,  222,  248,  299,  261,    0,  313,  353,  396,
      167,  283,  230,  184,  724,    0,  745,    0,  241,  255,
      686,  700,    0,    0,  247,  382,  455,  241,  286,  294,
      474,  550,  604,  656,  704,  756,  388,  462,  799,  470,
      536,  537,  538,  850,  899,  948,  551,  606,  994, 1046,
      311,  654,  591,  655,  600,  353, 8775,  670, 8775,  661,
     1111, 1121, 1132, 8775, 8775, 8775, 8775, 8775, 8775,    0,

      222,  252,  304,  359,  294,  323,  463,  331,  344,    0,
      370,  366,  698,  393,  374,  456,  714,  481,  378,  388,
      391,  409,  452,  767,  450,  452,  469,  546,  502,  528,
      539,  542,  595,  557,  576,    0,  592,  592,  658,  596,
      609,  595,  660,  662,  721,  649,  654,  662,  701,  711,
      713,  726,  726,    0,  759,  746,  762,  751,  772,  770,
      766,  807,  775,  804,  780,  816,  819,  808,  821,  807,
      828,  828,  846,  828,  824,  826,  861,  865,  862,  866,
      894,  878,  871,  861,  883, 8775,    0, 8775,    0,  356,
        0,  667,    0,  640, 1142, 1152, 1163,    0,    0,    0,

        0,    0,    0,  910,  946,  959, 1019, 1160, 1038, 1159,
     1206, 1156, 1044, 1199, 1203, 1236, 1276, 1261, 1276, 1305,
     1357, 1354, 1365, 1392, 1406, 1417, 1447, 1496, 1441, 1483,
     1495, 1532, 1540, 1540, 1565, 1579, 1581, 1594, 1622, 1625,
     1633, 1672, 1721, 1643, 1686, 1687, 1711, 1768, 1820, 1766,
     1718, 1812, 1821, 1861, 1864, 1885, 1908, 1877, 1921, 1944,
     1777, 1956, 1988, 1997, 1995, 2031, 2044, 2050, 2080, 2129,
     2102, 2093, 2141, 2142, 2180, 2177, 2211, 2195, 2229, 2251,
     2267, 2314, 2275, 2299, 2318, 2329, 2343, 2367, 2379,    0,
     8775,  605, 2444,    0,  886,    0,  911,  914,    0,  929,

        0,  916,  929,  922,  945,  947,  955, 1162,  955,  964,
      976,  988,  988, 1013,  996,  999, 1013, 1002, 1051, 1058,
     1067, 1214, 1163, 1164, 1156, 1214, 1213, 1227,    0, 1235,
     1233, 1266, 1252, 1260, 1260, 1260, 1275, 1283, 1290, 1291,
     1296, 1311, 1322, 1305, 1324, 1325, 1315, 1320, 1329, 1328,
     1343, 1350, 1351, 1407, 1343, 1374,    0, 1372, 1405, 1418,
     1431, 1468, 1433, 1436, 1425, 1431, 1443,    0, 1475, 1469,
     1472, 1490, 1508, 1509, 1497, 1652, 1516, 1559, 1520, 1551,
     1557, 1586, 1578, 1591, 1611, 1605, 1624, 1632, 1647,    0,
     1641, 1655, 1667, 1688, 1687, 1701, 1719, 1733, 1741, 1756,

     1766,    0, 1760, 1811, 1772, 1813, 1776, 1794, 1801, 1806,
     1834, 1815, 1827, 1876, 1871, 1874,    0,  604, 2454, 2447,
     2448, 2449, 2450, 2377, 2484, 2492, 2493, 2504, 2532, 2540,
     2545, 2547, 2561, 2610, 2586, 2611, 2624, 2660, 2636, 2672,
     2670, 2701, 2713, 2715, 2729, 2754, 2772, 2769, 2804, 2813,
     2822, 2848, 2863, 2861, 2866, 2911, 2902, 2916, 2916, 2937,
     2961, 2958, 2986, 3012, 2984, 3033, 3037, 3041, 3079, 3083,
     3082, 3127, 3130, 3139, 3165, 3180, 3183, 3195, 3209, 3221,
     3233, 3248, 3252, 3276, 3277, 3296, 3321, 3373, 3299, 3335,
     3370, 3334, 3395, 3398, 3423, 3430, 3444, 3458, 3469, 3483,

     3498, 3550, 3498, 3600, 3533, 3576, 3517, 3628, 3587, 3636,
     3649, 3672, 3684, 3689, 3692, 3697, 3733, 3738, 3741, 3740,
     3748, 3784, 3788, 3797, 3830, 3833, 3850, 3853, 3879, 3882,
     3902, 3907, 3904, 3952, 3923, 3951, 3979, 3993, 4007, 4023,
     4037, 4061,  586, 1912, 1921, 1917, 1918, 1928, 1934, 1945,
     1937, 1948,    0, 1954,    0,    0, 1983, 1981, 1987, 1981,
        0, 1980, 1985, 2005, 1995,    0, 2005, 2012, 2017, 2028,
     2052, 2036, 2054, 2051, 2054,    0,    0, 2063, 2070, 2076,
     2089, 2109, 2111, 2123,    0, 2141, 2148, 2163,    0,    0,
     2170, 2156,    0, 2187,    0, 2195, 2213, 2203, 2202, 2218,

     2225, 2315,    0, 2234,    0,    0,    0, 2239,    0, 2252,
     2267,    0, 2269, 2378, 2270, 2280, 2304,    0, 2315, 2323,
     2355, 2360,    0, 2370, 2377,    0, 2385, 2392, 2401, 2455,
        0, 2448, 2449, 2448, 2468,    0, 2502, 2507, 2521, 2521,
        0,    0, 2540, 2557, 2558, 2564, 2563,    0,    0, 2564,
     2598,    0, 2618, 2602, 2613, 2650, 2673, 2659, 2676, 2685,
     2691,    0, 2682,    0, 2700,    0, 2704,  548, 4072, 4075,
     4100, 4119, 4122, 4129, 4124, 4165, 4173, 4176, 4185, 4214,
     4215, 4233, 4255, 4267, 4268, 4269, 4297, 4304, 4321, 4322,
     4347, 4347, 4363, 4394, 4405, 4429, 4447, 4455, 4472, 4488,

     4491, 4497, 4533, 4539, 4547, 4577, 4580, 4601, 4508, 4602,
     4628, 4630, 4656, 4654, 4668, 4686, 4700, 4698, 4705, 4735,
     4741, 4752, 4753, 4787, 4795, 4798, 4843, 4839, 4840, 4881,
     4884, 4885, 4925, 4928, 4929, 4968, 4973, 4976, 4975, 4978,
     5018, 5018, 5026, 5062, 5070, 5071, 5100, 5112, 5115, 5124,
     5153, 5154, 5172, 5198, 5206, 5207, 5220, 5246, 5248, 5272,
     5260, 5294, 5299, 5303, 5316, 5338, 5346, 5345, 5351, 5370,
     5392, 5395, 5400, 5414, 5402, 5421, 5445, 5451, 5459, 5475,
     5494, 5508, 5505, 5536, 5548, 5553, 5587, 5588, 5589, 5601,
     5602, 5633,  547,    0,    0, 2705,    0, 2728,    0, 2730,

     2717, 2743, 2768, 2773, 2769, 2765, 2773, 2788,    0, 2784,
     2808, 2817, 2832, 2823, 2862,    0, 2873, 2863, 2873, 2891,
     2927, 2913, 2917, 2923, 2956, 2963,    0,    0, 2964, 2969,
     2993, 2996, 3024,    0,    0, 3016,    0,    0, 3019, 3036,
     3040, 3031,    0,    0, 3081,    0,    0, 3094, 3081, 3109,
     3091, 3105, 3094,    0,    0, 3111, 3099, 3147, 3138, 3142,
        0, 3162, 3177,    0, 3195, 3201, 3202, 3208,    0, 3234,
     3246, 3251, 3237, 3262, 3290, 3317, 3319, 3320,    0, 3351,
     3358, 3360,    0, 3353, 3389, 3393,    0,    0,  540, 5636,
     5637, 5677, 5678, 5689, 5690, 5728, 5729, 5747, 5742, 5782,

     5774, 5797, 5814, 5817, 5822, 5816, 5836, 5866, 5875, 5873,
     5874, 5900, 5924, 5925, 5929, 5949, 5954, 5973, 5998, 5975,
     6022, 6046, 6027, 6068, 6076, 6102, 6029, 6111, 6117, 6141,
     6147, 6155, 6171, 6185, 6199, 6224, 6213, 6229, 6253, 6259,
     6277, 6283, 6301, 6312, 6319, 6349, 6355, 6368, 6396, 6399,
     6410, 6416, 6450, 6458, 6486, 6494, 6508, 6520, 6532, 6544,
     6562, 6574, 6588, 6602, 6576, 6600, 6641, 6632, 6639, 6657,
     6675, 6699, 6705, 6718, 6729, 6756, 6758, 6782, 6790, 6792,
     6811, 6835, 6832, 6841,  530, 3403,    0, 3400,    0, 3405,
     3421, 3413, 3420,    0, 3440,    0, 3444, 3460, 3484, 3481,

     3486,    0, 3524,    0, 3524,    0,    0,    0, 3537,    0,
     3546, 3542, 3555,    0,    0,    0,    0,    0,    0, 3548,
     3562, 3570,    0,    0, 3558,    0, 3569,    0, 3595,    0,
     3585, 3600, 3609, 3626, 3610,    0, 3634, 3646, 3634, 3635,
        0, 3651,    0, 3666,    0, 3682, 3702, 3705, 3735, 3788,
        0,    0,    0,    0, 3779, 3789,  529, 6870, 6879, 6877,
     6886, 6895, 6888, 6924, 6931, 6939, 6940, 6975, 6981, 6984,
     7026, 7022, 7035, 7066, 7077, 7080, 7108, 7121, 7122, 7152,
     7160, 7165, 7165, 7201, 7209, 7214, 7228, 7250, 7253, 7258,
     7272, 7294, 7302, 7320, 7328, 7342, 7347, 7363, 7371, 7377,

     7407, 7401, 7425, 7445, 7450, 7458, 7480, 7494, 7508, 7522,
     7529, 7537, 7543, 7567, 7573, 7581, 7597, 7616, 7640, 7639,
     7663, 7684, 7681, 7687, 7705, 7728, 7731, 7747,  533,    0,
        0,    0,    0, 3800,    0,    0,  400, 3801, 3809,    0,
        0, 3809, 3806,    0,    0,    0, 3832,    0, 3853, 3849,
        0,    0, 3845, 3865, 3884, 3890,    0,    0, 3921, 3941,
        0,    0, 3938,    0, 3942, 3960, 3961, 3978, 3981,    0,
        0,  531, 7761, 7775, 7789, 7803, 7624, 7814, 7828, 7867,
     7852, 7870, 7882, 7896, 7908, 7911, 7920, 7946, 7959, 7961,
     7975, 7994, 7991, 8015, 8024, 8050, 8062, 8067, 8066, 8069,

     8099, 8110, 8141, 8123, 8154, 8177, 8190, 8201, 8198, 8231,
     8248, 8249, 8251, 8283,  530, 3977, 4085,    0, 3976,    0,
        0, 3994, 3986,    0,    0, 3993, 4022, 4033,    0,    0,
        0, 4025, 4039, 4061,    0, 4067,  528, 8302, 4263, 8297,
     8321, 8346, 8347, 8360, 8361, 8375, 8400, 8401, 8410, 8416,
     8446, 8452, 8460, 8485, 8499, 8504, 8507, 8529,  518,  437,
     4066, 4087,    0,    0, 4076,    0,    0,    0,    0, 4120,
        0,  510, 8567, 4123, 8548, 8553, 8582, 8555, 8574, 8598,
     8609, 8617, 8637, 8642,  474, 4165, 4146,    0,    0, 4158,
      472, 4400, 4172, 8656, 8661, 8663,  469, 4225, 8775,    0,

      440, 4231,    0, 8671,  430, 4217,  429, 4218,  429, 4227,
      428, 4246,  420, 4279,  389, 4305,  351, 4310,  347, 4324,
      338, 4333,  336, 4361,  307, 8775,  295,    0,  290,  279,
      252,  247, 8775,    0, 8775, 8744, 8749,  205, 8754, 8759,
     8764, 8769
    } ;

static const flex_int16_t yy_def[1343] =
    {   0,
     1335,    1, 1336, 1336, 1335,    5, 1335, 1335, 1335, 1335,
     1335, 1337, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1335, 1339, 1335, 1340, 1340, 1335,
     1340, 1341, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1342, 1342,   62,   62,   62,   63,   65,   62,   65,   62,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   62,
       65,   62,   62,   62, 1340, 1335, 1335, 1337, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1335, 1339, 1335, 1340, 1340,
     1340, 1341, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,

     1340, 1340, 1340,   62,   62,   62,   65,   65,   65,   65,
       65,   65,   62,   62,   65,   65,   65,   62,   62,   62,
       65,   65,   65,   62,   65,   65,   65,   62,   65,   65,
       62,   65,   62,   65,   62,   62,   65,   65,   65,   65,
       62,   62,   65,   65,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   65,   62,   62,   62,
       63,   62,   62,   62,   65,   62,   62,   62,   62, 1340,
     1335, 1335, 1335, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1340, 1340, 1340,   62,
       62,   62,   62,   65,   65,   65,   65,   62,   62,   62,
       62,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   62,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   62,   62,

       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   65,   65,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65, 1335, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340,   65,   65,
       62,   62,   62,   65,   62,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   62,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   62,   62,   62,   65,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   65, 1335, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340,   65,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,

       65,   65,   62,   62,   62,   65,   62,   62,   62,   65,
       62,   62,   62,   62,   65,   62,   62,   62,   62,   65,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   65,   65,   65,   65,
       65,   65,   65,   62,   65,   65,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   65,
       65,   65,   65,   65, 1335, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1340,   62,   62,   65,
       65,   65,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,

       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65, 1335, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1340,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62, 1335, 1338, 1335, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1340,   62, 1340,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   62,   62,   62,   62,   62, 1335, 1338,
     1335, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1340,   62, 1340,   62,   62,   62,   65,   65,   65,
       65,   65,   62,   62, 1335, 1335, 1335, 1338, 1338, 1338,
     1340, 1340, 1340,   62,   62,   65, 1335, 1335, 1335, 1338,

     1340, 1340, 1340,   65, 1335, 1335, 1340, 1340, 1335, 1335,
     1340, 1340, 1335, 1335, 1340, 1340, 1335, 1335, 1340, 1340,
     1335, 1335, 1340, 1340, 1335, 1335, 1340, 1340, 1335, 1340,
     1335, 1340, 1335, 1340,    0, 1335, 1335, 1335, 1335, 1335,
     1335, 1335
    } ;

static const flex_int16_t yy_nxt[8852] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,   37,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   77,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   96,   97,   98,   99,  101,  107,  102,  131,  133,
      108,  111,  141,  103,  132,  104,  109,  134,  112,  105,

      106,  142,  178,  135,  179,  113,  110,  180,  114,  100,
      185,  115,  101,  107,  102,  131,  133,  108,  111,  141,
      103,  132,  104,  109,  134,  112,  105,  106,  142,  178,
      135,  179,  113,  110,  180,  114,  116,  185,  115,  121,
      117,  122,  190,   86,  118,  143,  123,  294,  146,  144,
      119,  124,  147,  120,  193,  145,   86,   86,  148,  183,
      184,  198,  199,  116, 1334,  194,  121,  117,  122, 1333,
      149,  118,  143,  123,  294,  146,  144,  119,  124,  147,
      120,  125,  145,  158,  150,  148,  183,  184, 1332,  126,
      151,  152,  127,  295,  159,  128,  136,  149,  129, 1331,

      160,  130,  137,  138,  139,  181,  200,  201,  125,  140,
      158,  150, 1330,  182,  202,  203,  126,  151,  152,  127,
      295,  159,  128,  136, 1329,  129,  153,  160,  130,  137,
      138,  139,  181,  300,  154,  161,  140,  296,  155,  162,
      182,  156,  157,  163,  204,  297,  282,  301,  283,  164,
     1327,  284, 1325,  153,   86,   86,  204,  190,   86,  305,
      300,  154,  161, 1323,  296,  155,  162, 1321,  156,  157,
      163,  204,  297,  282,  301,  283,  164,  165,  284,  166,
      306,  298,  167,  204,  299,  168,  305,  169,  309,  170,
      171,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195, 1217, 1217,  307,  165, 1319,  166,  306,  298,  167,
      308,  299,  168,  316,  169,  309,  170,  171,  172,  314,
      326,  235,  173,  204,  327,  174,  175,  236,  204,  315,
      307,  328,  176,  204,  329,  177, 1317,  308, 1286, 1286,
      316, 1315, 1313, 1311, 1309,  172,  314,  326,  235,  173,
      204,  327,  174,  175,  236,  204,  315, 1307,  328,  176,
      204,  329,  177,  196,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  189,  189,  330,  189,  189,  189,
      189,  189,  189,  336,  237,  337, 1305, 1301,  204, 1297,
      302,  303,  238,  189,  189,  189,  204,  317,  239,  205,

      204,  206,  318,  330,  304,  338,  245,  207,  204,  208,
      336,  237,  337,  209,  210,  204,  204,  302,  303,  238,
      324,  325, 1291,  204,  317,  239,  205,  204,  206,  318,
     1285,  304,  338,  245,  207,  204,  208, 1272,  341, 1259,
      209,  210, 1237,  204, 1215, 1172, 1129,  324,  325,  189,
      189,  189, 1057,  189,  189,  189,  189,  189,  189,  985,
      889,  342,  246,  247,  250,  341,  204,  248,  251,  189,
      189,  189,  204,  249,  252,  343,  211,  204,  344,  339,
      212,  204,  204,  204,  204,  340,  213,  204,  342,  246,
      247,  250,  347,  204,  248,  251,  214,  204,  793,  204,

      249,  252,  343,  211,  204,  344,  339,  212,  204,  204,
      204,  204,  340,  213,  204,  668,  543,  204,  348,  347,
      287,  288,  349,  214,  204,  189,  215,  204,  265,  350,
      204,  355,  266,  216,  204,  345,  267,  204,  346,  356,
      217,  357,  268,  218,  204,  348,  219,  287,  288,  349,
      204,  418,  204,  215,  204,  265,  350,  204,  355,  266,
      216,  204,  345,  267,  204,  346,  356,  217,  357,  268,
      218,  417,  292,  219,  291,  290,  285,  204,  220,  204,
      204,  289,  221,  351,  286,  204,  222,  358,  364,  365,
      204,  204,  223,  352,  359,  224,  360,  366,  353,  354,

      204,  204,  204,  285,  189,  220,  191,  204,  289,  221,
      351,  286,  204,  222,  358,  364,  365,  204,  204,  223,
      352,  359,  224,  360,  366,  353,  354,  204,  204,  204,
      204,  310,  311,  312,  204,  313,  319,  225,  320,  226,
      204,  321,  367,  361,  227,  362,  370,  322,  371,  228,
      204,  188,  368,  372,  323,  369,  363,  204,  310,  311,
      312,  204,  313,  319,  225,  320,  226,  204,  321,  367,
      361,  227,  362,  370,  322,  371,  228,  204,  229,  368,
      372,  323,  369,  363,  373,  204,  230,  374,  375,  231,
      376,  331,  232,  332,  377,  233,  378,  333,  234,  186,

      379,  380,   87,  384,  334,  229, 1335,   47,  335,  387,
       47,  373,  204,  230,  374,  375,  231,  376,  331,  232,
      332,  377,  233,  378,  333,  234,  240,  379,  380,  381,
      384,  334,  241,  242,  243,  335,  387,  385,  393,  244,
      388,  391,  382,  394,  204, 1335,  395,  383,  386,  389,
      396,  397, 1335,  240,  400,  392,  381,  390,  401,  241,
      242,  243, 1335,  402,  385,  393,  244,  388,  391,  382,
      394,  204,  253,  395,  383,  386,  389,  396,  397,  204,
      398,  400,  392,  403,  390,  401,  254,  408,  405,  204,
      402,  399,  255,  256, 1335,  406,  409,  414,  407,  253,

     1335, 1335,  415,  404,  412,  416,  204,  398, 1335, 1335,
      403, 1335,  544,  254,  408,  405,  204,  413,  399,  255,
      256,  204,  406,  409,  414,  407,  257,  410,  204,  415,
      404,  412,  416,  411,  258,  204,  204,  545,  259,  544,
      204,  260,  261, 1335,  413, 1335,  204,  546,  204, 1335,
     1335,  547,  548,  257,  410,  204,  204, 1335, 1335,  549,
      411,  258,  204,  204,  545,  259,  550,  204,  260,  261,
      262,  420,  204,  204,  546,  551,  204,  204,  547,  548,
      552,  263,  204,  204,  204,  204,  549,  264,  553,  204,
      204, 1335,  204,  550,  557,  204, 1335,  262,  420,  204,

      421, 1335,  551,  204,  204,  204,  558,  552,  263,  204,
      559,  204,  204, 1335,  264,  553,  204,  204,  269,  204,
      270,  557,  204,  271,  204, 1335,  272,  421,  273,  560,
      274,  275,  204,  558,  561,  562,  563,  559,  564,  565,
      204, 1335,  566, 1335, 1335,  269, 1335,  270, 1335, 1335,
      271,  204,  422,  272,  204,  273,  560,  274,  275,  204,
      423,  561,  562,  563,  204,  564,  565,  204,  276,  566,
      204,  204,  277,  204,  204,  278,  279,  426,  204,  422,
      432,  204,  280,  204,  567,  281,  204,  423,  568,  569,
      204,  204,  204, 1335, 1335,  276, 1335,  204,  204,  277,

      204,  204,  278,  279,  426,  204, 1335,  432, 1335,  280,
      204,  567,  281, 1335, 1335,  568,  569,  204, 1335,  204,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
       92,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  196,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  424,  427,  431,  425,  554,  572,  555,  204,
      573,  204,  204,  204,  204,  204,  204,  574, 1335,  204,

      204,  204, 1335,  556,  204,  204, 1335, 1335, 1335,  424,
      427,  431,  425,  554,  572,  555,  204,  573,  204,  204,
      204,  204,  204,  204,  574,  204,  204,  204,  204,  204,
      556,  204,  204,  428,  429,  204,  433,  575,  204,  204,
      570,  204, 1335,  434, 1335,  204,  204,  430,  204, 1335,
      576,  204,  204,  577, 1335,  571,  204,  578,  435,  579,
      428,  429,  204,  433,  575,  204,  204,  570,  204,  204,
      434,  204,  204,  204,  430,  204,  204,  576,  204, 1335,
      577,  204,  571, 1335,  578,  435,  579,  440, 1335, 1335,
      580,  204,  581,  582, 1335, 1335,  204,  441,  204,  583,

      584,  585,  204,  204, 1335,  586,  204,  204,  204,  436,
      437,  438,  204,  439,  440,  442,  204,  580,  204,  581,
      582,  204,  204,  587,  441,  588,  583,  584,  585,  204,
      589,  204,  586,  204,  204,  204,  436,  437,  438,  204,
      439,  204,  442,  204,  590,  591,  443,  592,  204,  204,
      587,  444,  588,  593, 1335,  594,  595,  589,  204,  596,
     1335,  597,  204, 1335,  598, 1335, 1335, 1335,  204,  599,
     1335,  590,  591,  443,  592, 1335,  600,  601,  444,  445,
      593,  446,  594,  595,  447,  604,  596,  204,  597,  204,
      448,  598,  204,  450,  451, 1335,  599,  449,  204,  204,

      204, 1335,  204,  600,  601,  204,  445,  452,  446,  605,
      204,  447,  604,  606,  204, 1335,  204,  448,  204,  204,
      450,  451,  204, 1335,  449,  204,  204,  204,  453,  204,
     1335,  607,  204,  602,  452, 1335,  605,  204,  204,  204,
      606,  204,  455,  603, 1335,  204,  454, 1335,  608,  204,
      204,  204,  204, 1335, 1335,  453,  609,  204,  607, 1335,
      602,  612,  204, 1335,  613,  204,  204,  614,  204,  455,
      603,  456,  615,  454,  462,  608,  204,  204,  204,  204,
      204,  204,  204,  609,  204,  616,  204,  204,  612,  204,
      610,  613,  204, 1335,  614, 1335, 1335,  617,  456,  615,

      611,  462,  618,  204, 1335, 1335, 1335,  204,  204,  204,
     1335,  619,  616,  204,  204, 1335,  463,  610,  204,  204,
      457,  204,  458,  204,  617,  204,  459,  611,  204,  618,
      620,  464,  204,  460,  621,  622,  623,  461,  619, 1335,
     1335,  204,  204,  463, 1335,  204, 1335,  457,  204,  458,
      204,  626,  204,  459,  629,  204, 1335,  620,  464,  204,
      460,  621,  622,  623,  461,  465,  204,  204,  204,  204,
      204,  466,  204,  468, 1335,  204,  467,  204,  626,  630,
      204,  629, 1335,  627, 1335,  204,  204, 1335, 1335, 1335,
      631,  204,  465,  204,  204,  204,  628,  204,  466,  204,

      468,  469,  204,  467,  204,  204,  630,  204,  632,  204,
      627,  204,  204,  204,  204,  470,  204,  631,  204,  633,
      634,  471,  204,  628,  472,  204,  204,  204,  469,  473,
     1335, 1335,  204, 1335,  204,  632,  204, 1335,  204,  204,
     1335,  204,  470,  204,  635,  636,  633,  634,  471, 1335,
      637,  472,  204,  204,  204,  204,  473,  204,  204,  204,
      204,  204,  204,  475,  474,  204,  204,  204,  638,  204,
      204,  635,  636,  639,  624, 1335,  204,  637,  481,  204,
      640, 1335,  204,  204,  204,  204,  204,  204,  204,  204,
      475,  474,  204,  625,  204,  638,  204,  204,  204,  641,

      639,  624,  204,  204,  642,  481,  204,  640,  204,  476,
      204, 1335,  204,  204, 1335,  204,  482,  204,  204, 1335,
      625,  643,  204,  204, 1335,  204,  641, 1335,  644,  204,
     1335,  642,  204,  483, 1335,  204,  476,  204,  484,  204,
      204,  204,  645,  482,  204,  204,  477,  204,  643,  204,
      204,  204,  646,  491,  204,  644,  478,  204,  204,  204,
      483,  479,  480,  204,  204,  484,  204, 1335,  204,  645,
      647, 1335, 1335,  477,  204, 1335, 1335, 1335,  204,  646,
      491,  204,  648,  478,  204,  204, 1335, 1335,  479,  480,
      204,  649,  650,  204,  204,  651, 1335,  647,  204,  204,

      485,  204,  486,  501,  204,  490,  204,  204,  654,  648,
     1335,  204,  657,  204,  204, 1335,  658, 1335,  649,  650,
     1335,  204,  651,  204, 1335,  204,  204,  485,  204,  486,
      501,  204,  490,  204,  204,  654,  659,  652,  204,  657,
      204,  204,  487,  658,  488,  204,  653,  492,  660,  655,
      204,  656,  204,  204,  204,  489,  204,  204,  661,  662,
      204,  204,  493,  659,  652,  204,  204, 1335,  663,  487,
     1335,  488,  204,  653,  492,  660,  655, 1335,  656,  204,
      204,  204,  489,  204,  204,  661,  662,  204,  204,  493,
     1335, 1335,  204,  204,  204,  663,  204,  496, 1335,  204,

      666,  204,  494, 1335,  204,  495,  204,  497, 1335,  204,
      204,  664,  204,  667, 1335,  665, 1335,  204,  204, 1335,
      204,  204,  204,  204,  496,  204,  204,  666,  204,  494,
      204,  204,  495,  204,  497,  498,  204,  204,  664,  204,
      667,  204,  665,  204,  204,  204,  499,  204,  204,  204,
     1335,  794,  204,  204,  204, 1335,  204,  204, 1335, 1335,
      795,  204,  498,  796,  797, 1335,  204,  798,  204,  799,
      204,  800,  801,  499,  802,  204,  803,  204,  794,  204,
      204,  204,  204,  204,  204,  500,  204,  795,  204,  204,
      796,  797,  204,  204,  798,  502,  799, 1335,  800,  801,

     1335,  802,  204,  803,  204,  804,  204, 1335, 1335,  204,
      503,  204,  500,  204,  204,  805,  204,  806,  204,  204,
      807,  808,  502,  504,  204,  809, 1335,  505,  204,  204,
      506,  810,  804,  204,  204,  204,  811,  503,  812, 1335,
      204,  204,  805,  204,  806,  204,  813,  807,  808, 1335,
      504,  204,  809,  507,  505,  204, 1335,  506,  810,  814,
      204,  204,  204,  811,  204,  812,  508,  204, 1335,  815,
      204,  509,  510,  813,  816,  817,  204,  204,  818,  204,
      507,  819, 1335,  511,  204,  204,  814,  820, 1335,  204,
      204,  204, 1335,  508,  512,  204,  815, 1335,  509,  510,

      821,  816,  817,  204,  204,  818,  204,  822,  819,  513,
      511,  204,  204,  204,  820,  204,  204,  204,  823,  204,
      204,  512,  204,  519,  517,  204, 1335,  821,  204,  204,
      824,  825,  204,  826,  822, 1335,  513, 1335,  518,  204,
      204, 1335,  204, 1335, 1335,  823,  204,  204,  204,  827,
      519,  517,  204,  514, 1335,  204,  204,  824,  825,  204,
      826, 1335,  515,  520,  204,  518,  204,  204,  204,  204,
      516,  204,  204, 1335,  204,  204,  827,  204,  204, 1335,
      514,  521,  828, 1335,  829,  830, 1335,  204,  204,  515,
      520,  204,  831,  832,  204,  204,  204,  516,  204,  204,

      523,  204,  522,  204,  204,  204,  204,  204,  521,  828,
      204,  829,  830,  204,  204,  204,  204, 1335, 1335,  831,
      832,  526,  833,  204, 1335,  204,  204,  523, 1335,  522,
      204,  204, 1335,  204,  204,  834, 1335,  204, 1335,  835,
      204,  204,  836,  204,  204,  524,  204,  837,  526,  833,
      204,  204,  204,  204, 1335,  204,  525,  838,  204,  204,
     1335, 1335,  834,  527,  839,  204,  835,  842,  204,  836,
     1335,  204,  524,  204,  837,  204, 1335,  204,  204, 1335,
      843,  204,  204,  525,  838,  844,  204,  204,  528,  529,
      527,  839,  204,  845,  842,  846,  204,  204, 1335,  849,

      534,  204,  204,  204,  204,  204,  204,  843,  204,  530,
     1335,  204,  844, 1335,  204,  528,  529, 1335, 1335,  850,
      845,  204,  846,  204,  204,  204,  849,  534,  204,  535,
      204, 1335,  204,  204,  851,  204,  530,  531,  204,  852,
      204, 1335, 1335,  840,  532,  204,  850,  533,  204,  853,
      204,  536,  204,  204,  841,  538,  535,  537,  204,  204,
      204,  851,  204,  204,  531,  204,  852,  204,  539,  540,
      840,  532,  204,  204,  533,  204,  853,  204,  536,  204,
      204,  841,  538, 1335,  537,  204,  204,  204, 1335,  204,
      204, 1335,  204,  204,  854,  539,  540,  204, 1335,  855,

      204,  542,  204,  204,  856,  204,  204,  857,  541,  204,
      671,  858,  204,  204,  859,  204,  204,  204,  847,  848,
      204,  854,  204,  860,  204,  204,  855, 1335,  542, 1335,
      204,  856,  204, 1335,  857,  541,  204,  671,  858,  204,
      204,  859,  204, 1335,  204,  847,  848, 1335, 1335,  204,
      860, 1335,  204,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  204,  669,  204,  670,  204,  204,  204,
      204,  861,  862,  204,  204,  204,  204, 1335,  863,  864,
     1335,  865, 1335,  204,  204,  204,  204, 1335, 1335, 1335,

      204,  669,  204,  670,  204,  204,  204,  204,  861,  862,
      204,  204,  204,  204,  672,  863,  864,  204,  865,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204, 1335,  204,  204,  204, 1335,  866,  204,  204, 1335,
      673,  672,  867, 1335,  204,  868,  204,  869, 1335, 1335,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  674,  866,  204,  204,  204,  673,  204,  867,
      204,  204,  868,  870,  869,  676,  204,  204,  204, 1335,
      677,  204,  204,  871,  675,  204,  204,  204,  872,  674,
      873,  204,  204,  204,  678,  204,  204,  204,  204,  874,

      870,  204,  676,  204,  875,  204,  204,  677,  204,  204,
      871,  675,  204,  204,  204,  872,  204,  873,  204,  204,
     1335,  678,  204,  204, 1335,  682,  874, 1335,  204, 1335,
     1335,  875,  204,  204,  679, 1335,  680,  204,  876,  204,
      204,  204,  877,  204,  878, 1335,  204,  204,  879,  204,
      204,  681,  682,  683,  204, 1335,  204,  204,  684,  204,
      204,  679,  204,  680,  204,  876,  204,  204,  204,  877,
      204,  878,  204,  204,  204,  879, 1335,  204,  681, 1335,
      683,  204,  686,  204,  204,  684,  204,  204, 1335,  204,
      204, 1335,  880,  204,  687,  881,  204,  204,  204,  204,

      882,  685,  204,  204,  883,  204,  204, 1335,  204,  686,
      688,  884, 1335,  204, 1335,  204, 1335,  204,  204,  880,
      885,  687,  881,  204,  886,  204,  887,  882,  685,  204,
      204,  883,  204,  204,  204,  204,  204,  688,  884,  690,
      689,  204,  204,  204,  888,  204,  204,  885,  204,  204,
      204,  886,  986,  887,  987,  691,  988, 1335,  989,  204,
      204,  204,  692,  204,  204,  990,  690,  689,  204,  204,
      204,  888, 1335,  204,  204,  204,  204,  204, 1335,  986,
      204,  987,  691,  988,  693,  989,  204,  204, 1335,  692,
      204,  204,  990,  991,  694,  695,  204,  992,  204,  204,

      204,  204,  204, 1335,  993,  204,  994,  204,  204,  995,
      696,  693, 1335, 1335,  996,  204, 1335,  204,  204,  997,
      991,  694,  695, 1335,  992,  204,  204,  204,  697,  204,
      204,  993,  204,  994,  204,  204,  995,  696,  998,  698,
      204,  996,  204,  204, 1335,  204,  997, 1335,  204,  204,
      204, 1335,  204,  999, 1000,  697, 1001,  204,  204,  204,
     1335,  204, 1335,  699, 1335,  998,  698,  204,  204, 1335,
      204,  700, 1335, 1335,  204,  204,  204,  204,  204,  204,
      999, 1000, 1335, 1001,  204,  204,  204,  702, 1002,  204,
      699,  204,  204,  204,  204,  204,  204,  204,  700,  204,

      701,  204,  204, 1003, 1004,  204, 1335,  204, 1005,  204,
     1335,  204,  204, 1335,  702, 1002,  204, 1006,  204,  204,
      204,  204, 1335,  204,  204, 1335,  204,  701,  704,  204,
     1003, 1004,  204,  703,  204, 1005,  204,  204,  204,  204,
      705,  204,  204, 1335, 1006, 1335,  204,  204,  204,  204,
     1335,  204,  204, 1007, 1008,  704,  706,  204, 1009,  204,
      703,  204,  204, 1010,  204,  204, 1335,  705,  204,  204,
      707, 1335,  204,  204,  204,  204,  204,  204,  204,  204,
     1007, 1008,  204,  706,  204, 1009, 1011, 1012,  204,  204,
     1010,  204, 1335,  204,  204, 1335,  204,  707,  709,  204,

      708,  204, 1335,  204,  204, 1335,  204, 1335, 1013,  204,
     1014, 1335,  710, 1011, 1012, 1335,  204,  712,  204,  204,
      204,  204,  204,  204,  204,  709, 1015,  708,  204,  204,
      204, 1335,  204,  204,  711, 1013, 1016, 1014,  204,  710,
     1335, 1335,  204,  204,  712, 1335,  204, 1335,  204,  204,
     1335,  204, 1017, 1015, 1335, 1335,  204, 1018,  204,  204,
     1019,  711, 1020, 1016, 1023,  204,  204,  713,  204,  204,
      204,  714,  204,  204,  715,  204,  204,  204,  204, 1017,
     1021,  204,  204, 1022, 1018,  204,  204, 1019, 1335, 1020,
     1335, 1023, 1335,  204,  713,  204, 1335,  204,  714,  204,

      204,  715,  716,  204,  204,  204, 1024, 1021,  204,  204,
     1022,  718,  204,  204,  204,  204,  204,  204,  204,  204,
     1025, 1026,  204,  204,  204,  717, 1335,  204,  204,  716,
     1335, 1027, 1028, 1024, 1029, 1030, 1335, 1031,  718,  204,
     1032,  204,  204,  204,  204,  204,  204, 1025, 1026,  204,
      204,  204,  717,  204,  204,  204,  204,  719, 1027, 1028,
      204, 1029, 1030,  204, 1031,  204,  204, 1032, 1335,  204,
     1335,  720, 1033,  204, 1335,  204,  204, 1034,  721, 1335,
      204, 1035, 1335,  204,  719,  204, 1335,  204, 1036, 1335,
      204,  204,  204,  204, 1335,  204,  204,  722,  720, 1033,

      204,  204,  204,  204, 1034,  721,  204, 1037, 1035,  724,
      204,  204,  204,  204, 1335, 1036,  723, 1038,  204,  204,
     1335,  725,  204, 1039,  722,  204,  204, 1040,  204,  204,
     1335,  204, 1335,  204, 1037,  726,  724,  204,  204,  204,
      204,  204, 1335,  723, 1038,  204,  204,  727,  725, 1041,
     1039,  204,  204,  204, 1040,  204,  204,  728,  204,  204,
     1335, 1335,  726,  204, 1042, 1335,  204,  204,  204,  204,
     1335, 1043,  204, 1044,  727,  729, 1041, 1045,  204,  204,
     1335,  204,  204,  730,  728,  204,  204,  204,  204, 1335,
      204, 1042,  204,  204,  204, 1335,  204,  204, 1043, 1335,

     1044, 1046,  729,  732, 1045, 1335,  204,  204,  204,  204,
      730,  204,  204,  204,  204,  204,  204,  731, 1335,  204,
      204,  204,  204,  204,  204,  204,  733,  737, 1046,  204,
      732, 1047,  204, 1335,  204,  204,  204, 1335,  204, 1048,
      204, 1049,  204,  204,  731,  204,  734,  204,  204,  204,
      204,  204,  204,  733,  737, 1050,  204,  204, 1047,  204,
      204,  204,  204,  738,  204,  204, 1048,  204, 1049,  204,
      204,  204,  204,  734,  204,  740, 1335, 1051,  204, 1335,
      204,  204, 1050, 1052,  204, 1335, 1053,  204,  204, 1335,
      738,  204,  204, 1054,  204,  735,  204,  204,  204,  204,

      204, 1335,  740,  204, 1051,  736,  204,  204,  204,  204,
     1052, 1055,  739, 1053, 1335, 1056,  204, 1335, 1335,  204,
     1054,  204,  735,  204,  204,  204,  204,  204,  204, 1130,
      204,  204,  736,  204,  204, 1131,  204,  741, 1055,  739,
     1132,  204, 1056,  204,  204,  742,  204, 1133,  204,  204,
     1335,  204,  204,  204, 1134,  204, 1130, 1335,  204,  204,
     1135,  204, 1131,  743,  741,  204, 1335, 1132,  204,  204,
      204,  204,  742, 1136, 1133,  204,  204,  204, 1335,  204,
      204, 1134, 1335,  744,  204, 1137,  204, 1135, 1335,  204,
      743,  204,  204,  204, 1138,  746,  204,  204,  745,  204,

     1136, 1335,  204,  204,  204,  204,  204, 1335, 1139,  747,
      744,  204, 1137,  204, 1140,  204,  204, 1335,  204,  204,
      204, 1138,  746, 1335,  204,  745,  204, 1141,  204,  204,
      204,  204,  204,  751,  204, 1139,  747,  748,  204, 1335,
      204, 1140,  204,  204,  204, 1335,  204, 1142, 1143, 1335,
      756,  204,  204, 1335, 1141,  204,  204,  204,  204, 1335,
      751,  204,  204, 1144,  748,  204,  204,  754,  204, 1335,
      204,  204,  749,  204, 1142, 1143,  204,  756,  204,  204,
      204, 1145, 1335, 1146,  204, 1147,  204, 1148, 1149,  204,
     1144,  750, 1150,  204,  754,  204,  204, 1335, 1151,  749,

      204, 1335, 1152,  204,  755,  204, 1335,  204, 1145,  204,
     1146,  204, 1147,  204, 1148, 1149,  204, 1153,  750, 1150,
      204,  204,  204,  204,  752, 1151, 1154,  204,  758, 1152,
     1155,  755,  204,  204, 1335,  204,  204,  753,  204, 1156,
      204, 1335, 1335,  204, 1153,  204, 1335,  204,  204,  204,
      757,  752, 1157, 1154,  204,  758, 1158, 1155, 1159,  204,
      204,  204,  204,  204,  753,  759, 1156,  204,  204,  204,
     1160,  204,  204,  204, 1161, 1162,  204,  757, 1335, 1157,
     1335,  204,  760, 1158,  204, 1159, 1163, 1335,  204,  204,
      204, 1335,  759, 1335,  204,  204,  204, 1160,  204, 1164,

      204, 1161, 1162,  204, 1165,  204, 1335,  204,  204,  760,
      762,  204,  761, 1163,  204,  204,  204,  204,  764,  204,
      204,  204,  204,  204, 1166,  763, 1164,  204,  204, 1167,
      204, 1165,  204,  204,  204,  204, 1335,  762,  204,  761,
     1335,  204,  204,  204,  204,  764,  204,  204, 1335,  204,
      204, 1166,  763, 1335,  204,  204, 1167,  204, 1335,  204,
      204, 1335,  204,  204,  204,  204, 1335,  204,  204,  204,
      204,  204,  765,  768,  204,  204, 1168,  204,  767,  204,
      204,  204,  766,  204,  204,  204,  204,  204,  204,  769,
      204,  204, 1335,  204,  204,  204,  204, 1335,  204,  765,

      768,  204,  204, 1168,  204,  767,  204,  204,  204,  766,
      204,  204,  204, 1169,  204,  204,  769,  204, 1170,  204,
      204,  771, 1171,  204,  204,  770, 1216, 1218,  204,  204,
      204, 1219,  204,  204,  772, 1220, 1335,  204, 1335, 1335,
     1169, 1335,  204, 1335,  204, 1170,  204, 1221,  771, 1171,
      204,  204,  770, 1216, 1218,  204,  204,  204, 1219,  204,
      204,  772, 1220,  204,  204,  204,  204, 1222,  774,  204,
      204,  773, 1335,  204, 1221,  204,  775, 1223,  204,  204,
      204, 1335, 1224,  204, 1225, 1335,  204, 1335, 1335,  204,
      204, 1226,  204,  204, 1222,  774,  204,  204,  773,  204,

      204, 1335,  204,  775, 1223,  204,  204,  204,  777, 1224,
      204, 1225,  204,  204,  776,  204,  204,  778, 1226,  204,
     1227, 1335,  204,  204,  204, 1228,  204,  204,  204, 1335,
      204, 1335,  204,  204,  204,  777, 1335,  204,  779,  204,
      782,  776,  204,  780,  778,  781,  204, 1227,  204,  204,
      204,  204, 1228,  204,  204,  204,  204,  204,  784,  204,
      204,  204, 1229,  204,  204,  779, 1335,  782,  204, 1335,
      780, 1335,  781, 1230,  783,  204, 1335,  204,  204, 1231,
      204, 1232,  204,  204,  204,  784,  204, 1335,  204, 1229,
      204,  204, 1335,  785, 1233,  204,  204, 1335,  204, 1335,

     1230,  783, 1234,  786, 1235,  204, 1231, 1236, 1232,  204,
     1335,  204,  204,  204,  204,  204, 1260, 1262,  204,  204,
      785, 1233, 1263,  204,  204,  204,  204, 1264,  204, 1234,
      786, 1235, 1265,  204, 1236, 1335, 1335,  787,  204,  204,
      204,  204,  204, 1260, 1262, 1335,  204,  204,  788, 1263,
     1335,  204,  204,  204, 1264,  204,  204, 1266,  789, 1265,
      204, 1267,  790,  204,  787,  204,  791,  204,  204,  204,
      204, 1268,  204, 1335,  204,  788, 1269,  204, 1335,  204,
     1335, 1335,  204,  204, 1266,  789, 1217, 1217, 1267,  790,
      204, 1270, 1271,  791,  204,  204,  204,  204, 1268,  204,

      792,  204, 1287, 1269,  204,  204,  204,  204,  204,  204,
      204,  890,  204, 1288,  891,  204, 1289,  204, 1270, 1271,
      204,  204, 1335,  204, 1261, 1335,  204,  792,  204, 1287,
      204, 1335,  204,  204,  204,  204,  204,  204,  890,  204,
     1288,  891,  204, 1289,  204,  204,  892,  204,  204,  204,
      896, 1261,  204,  204,  204,  204, 1290,  204,  204, 1293,
      204,  894,  204,  204,  895,  893, 1286, 1286,  204,  204,
      204, 1335,  204,  892,  204,  204,  204,  896, 1335,  204,
     1335,  204,  204, 1290, 1335,  204, 1293,  204,  894,  204,
     1299,  895,  893, 1300, 1335,  204,  204,  204,  204,  898,

      897,  204,  204,  204, 1335,  204,  204,  899, 1298,  204,
      204,  204,  204, 1335, 1335,  204, 1303, 1299, 1335,  204,
     1300,  204,  204, 1335, 1335,  204,  898,  897, 1335,  204,
      204,  204,  204,  204,  899, 1298,  204,  204,  204,  204,
      204,  204,  204, 1303,  204,  204,  204, 1306,  204,  204,
      204,  204, 1335, 1308, 1335,  900, 1310, 1312,  204,  204,
      204,  204, 1335,  204, 1239, 1217, 1335,  204,  204,  204,
     1335,  204,  204, 1314, 1306, 1335, 1335,  204,  204,  204,
     1308,  204,  900, 1310, 1312,  204,  204,  204,  204,  901,
      204,  204, 1316,  204,  204,  204,  204,  902,  204,  204,

     1314,  204, 1274,  204,  204,  204,  204,  903,  204, 1318,
     1335, 1335,  204,  204,  204,  204,  901, 1335,  204, 1316,
      204,  204,  204,  204,  902,  204,  204,  204,  204, 1274,
      204,  204,  204,  204,  903, 1320, 1318,  204,  904,  204,
      204,  204,  204,  204,  905, 1322, 1335,  906,  204,  204,
      204,  204,  204, 1335,  204, 1335, 1335,  204,  204, 1324,
      204, 1326, 1320,  907,  204,  904,  204,  204,  204, 1335,
      204,  905, 1322,  204,  906,  204,  204,  204,  204,  204,
      908, 1335,  204,  204,  204,  204, 1324,  204, 1326, 1328,
      907, 1335,  204,  204,  204,  204,  204,  909,  204, 1335,

      204, 1292, 1286,  204,  204, 1335, 1335,  908,  204,  204,
      204, 1335, 1335, 1335,  204, 1335, 1328, 1335, 1335,  204,
      204, 1335, 1335,  204,  909,  204, 1335,  204, 1335,  204,
      204, 1335, 1335, 1335,  204,  204,  910, 1335,  204,  204,
      204, 1335, 1335, 1302, 1335,  204,  911, 1335, 1335, 1335,
      204,  912, 1335, 1335,  204, 1335,  204, 1335, 1335, 1335,
     1335,  204,  204,  910,  204,  204,  204,  204, 1335,  204,
     1302, 1335,  204,  911,  204, 1335, 1335,  204,  912,  914,
      204, 1335,  204, 1335, 1335, 1335,  913,  204,  204,  204,
      204,  204,  204, 1335, 1335,  204,  204, 1335,  204, 1335,

      204,  204,  915, 1335, 1335, 1335,  914,  204,  204,  204,
     1335, 1335, 1335,  913,  204,  204, 1335,  204,  204,  204,
     1335,  916,  204,  204,  204,  204,  204,  204,  204,  915,
      204,  204,  204,  204,  923,  204,  204,  204,  204, 1335,
     1335, 1335,  204, 1335,  204,  204, 1335, 1335,  916, 1335,
      204,  204, 1335,  204,  204,  204, 1335,  204,  204,  204,
      204,  923, 1335,  204,  204,  204,  204, 1335,  204,  204,
      917,  204,  204,  204,  204, 1335,  918, 1335,  204,  204,
      204,  204,  204, 1335,  204, 1335, 1335,  204, 1335,  919,
     1335, 1335,  204,  204, 1335,  204, 1335,  917, 1335,  204,

      204,  204,  921,  918, 1335,  204,  204,  204, 1335,  204,
      204,  204,  204,  204,  204,  204,  919,  204,  920,  204,
      204, 1335,  204,  922, 1335,  204, 1335, 1335,  204,  921,
     1335, 1335,  204, 1335,  204, 1335,  204,  204,  204,  204,
      204,  204,  204, 1335,  204,  920,  204,  204,  204,  204,
      922, 1335,  204, 1335,  204,  204,  204, 1335,  204,  204,
      204,  204, 1335,  204,  204,  204,  925, 1335,  204,  924,
     1335, 1335, 1335,  204,  204,  204,  204, 1335,  926, 1335,
      204,  204,  204,  204,  204,  204,  204,  204, 1335, 1335,
      204,  204,  204,  925,  204, 1335,  924, 1335,  204, 1335,

      204,  204,  204,  204,  204,  926, 1335,  204,  927,  204,
     1335,  204,  204,  204,  204, 1335,  204,  204, 1335,  204,
     1335,  204,  204, 1335,  204,  204,  204,  204,  204,  204,
      204,  204,  204, 1335,  204,  927,  204,  928,  204,  204,
      929,  204, 1335,  204,  204,  204,  204, 1335, 1335,  204,
      204,  204, 1335,  204, 1335,  204, 1335,  204, 1335,  204,
     1335,  204, 1335,  204,  928,  204, 1335,  929,  204, 1335,
      204,  204,  204,  204,  204,  204,  204,  204,  931,  204,
      204,  930,  204,  204, 1335, 1335,  204, 1335,  204,  204,
     1335, 1335,  932, 1335, 1335,  204, 1335,  204,  204,  204,

     1335,  204,  204,  204, 1335,  931,  204,  204,  930,  204,
      204, 1335, 1335,  204, 1335,  204,  204, 1335, 1335,  932,
      204, 1335,  204, 1335, 1335,  204,  204,  204,  204, 1335,
      204,  204,  933,  204,  934,  204, 1335,  935,  204, 1335,
      204, 1335, 1335,  204, 1335, 1335, 1335,  204, 1335,  204,
     1335, 1335, 1335, 1335,  204,  204, 1335,  204,  204,  933,
      204,  934,  204, 1335,  935,  204, 1335,  204, 1335, 1335,
      204,  936,  204,  938,  204,  204,  204, 1335,  204,  204,
      204, 1335,  937,  204,  204,  204, 1335, 1335,  204, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,  936,  204,

      938,  204,  204,  204, 1335,  204,  204,  204, 1335,  937,
      204,  204,  204, 1335,  204,  204,  204,  204,  204,  204,
      204,  204, 1335, 1335,  204,  204,  204, 1335, 1335,  204,
      204, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335,  204, 1335,  204,  204,  204,  204,  204,  204, 1335,
     1335,  204,  204,  204, 1335, 1335,  204,  204,  204, 1335,
      204,  204,  940,  204,  204,  204,  939, 1335,  204,  204,
      204, 1335, 1335,  204,  204, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335,  204, 1335,  204,  204,  940,
      204,  204,  204,  939,  941,  204,  204,  204,  204,  204,

      204,  204,  942,  204,  204, 1335,  204,  945,  204,  204,
      204,  204,  204,  204,  204,  943,  944, 1335,  204,  204,
      204,  941,  204,  204, 1335,  204,  204, 1335, 1335,  942,
      204,  204, 1335,  204,  945,  204,  204,  204,  204,  204,
      204,  204,  943,  944,  204,  204,  204,  204,  947,  204,
      204,  204,  204,  204,  204, 1335,  204,  946,  204, 1335,
     1335, 1335,  204,  204,  204, 1335, 1335, 1335, 1335, 1335,
     1335,  204,  204, 1335, 1335,  947, 1335, 1335,  204,  204,
      204,  204, 1335,  204,  946,  204,  948, 1335,  204,  204,
      204,  204,  204, 1335, 1335, 1335,  949,  204,  204,  204,

      204,  204, 1335, 1335, 1335, 1335,  204,  204,  204, 1335,
      950, 1335, 1335,  948, 1335,  204,  204,  204, 1335,  204,
     1335, 1335, 1335,  949,  204,  204,  204,  204,  204, 1335,
      204, 1335, 1335,  204,  204,  204,  204,  950,  204,  951,
     1335,  204,  204,  204,  204,  204,  204, 1335,  204,  952,
      204,  204, 1335,  204,  953, 1335, 1335,  204,  204, 1335,
      204,  204, 1335,  204, 1335,  204,  951, 1335,  204,  204,
      204, 1335,  204,  204, 1335,  204,  952,  204,  204,  204,
      954,  953, 1335,  204,  204,  204, 1335,  204,  204,  204,
      204, 1335, 1335, 1335,  955, 1335, 1335,  204,  204,  204,

      204, 1335,  204, 1335, 1335, 1335,  204,  954,  204, 1335,
      204,  204, 1335, 1335, 1335, 1335,  204,  204,  204, 1335,
      956,  955, 1335, 1335,  204,  204,  204,  204,  204,  204,
     1335, 1335,  957,  204,  204,  204,  204,  204, 1335, 1335,
     1335, 1335,  204,  204,  204,  204,  204,  956, 1335, 1335,
      204,  204,  204,  204,  958,  204,  204, 1335, 1335,  957,
      204,  204, 1335,  204,  204, 1335,  204, 1335, 1335,  204,
      204,  204,  204,  204,  204, 1335,  204,  204,  204,  204,
      204,  958,  204,  204,  204,  959,  204, 1335, 1335,  960,
      204, 1335,  204,  204,  204,  961,  204, 1335,  204,  204,

     1335,  204,  204,  204, 1335,  204,  204, 1335,  204,  204,
     1335,  204,  959,  204, 1335, 1335,  960,  204,  204,  204,
      204,  204,  961,  204,  204,  204, 1335,  964,  962,  204,
      204, 1335,  204,  204,  963,  204,  204, 1335,  204,  204,
      204, 1335,  965,  204,  204,  204,  204,  204,  204, 1335,
     1335,  204,  204, 1335,  964,  962, 1335,  204, 1335,  204,
     1335,  963,  204,  204,  204,  204,  204,  204,  204,  965,
      204,  204,  204,  204,  204,  204,  204,  967,  966,  204,
      204,  204,  204, 1335,  204,  204, 1335,  204, 1335,  204,
      204,  204,  204, 1335, 1335,  204,  204,  204, 1335,  204,

      968,  204, 1335,  204,  967,  966,  204,  204,  204,  204,
     1335,  204,  204, 1335,  204, 1335,  204,  204,  969,  204,
     1335,  204,  204,  204,  204,  204,  204,  968,  204, 1335,
      204,  970, 1335,  204, 1335,  204,  204,  204,  204, 1335,
      204,  204,  971,  204,  204,  969,  204,  204,  204,  204,
      204, 1335,  204,  204,  204,  204,  204,  204,  970, 1335,
      204,  972,  204,  204,  204,  204,  204,  204,  204,  971,
     1335,  204, 1335,  204,  204,  973, 1335,  204,  204, 1335,
      204,  204, 1335,  204,  204,  204,  204,  204,  972, 1335,
      204,  204,  204,  204,  204, 1335,  204, 1335, 1335,  204,

     1335,  974,  973, 1335,  204,  204, 1335,  204,  204, 1335,
      975,  204,  204,  204, 1335,  204, 1335,  204,  204,  204,
      204,  204, 1335,  204, 1335, 1335,  204,  204,  974,  204,
      977,  204, 1335, 1335,  204,  204,  976,  975,  204,  204,
      204,  204,  204,  204, 1335,  204,  978,  204,  204, 1335,
      204, 1335, 1335,  204,  204, 1335,  204,  977, 1335, 1335,
     1335,  204, 1335,  976,  979,  204,  204,  204,  204,  204,
      204,  204,  204,  978,  980,  204,  204,  204,  204,  204,
      204,  204,  981,  204,  204, 1335, 1335, 1335, 1335,  204,
     1335,  979, 1335, 1335,  204, 1335,  204, 1335,  204,  204,

     1335,  980, 1335,  204, 1335,  204,  204, 1335,  204,  981,
      204,  204, 1335,  204,  204,  204,  204,  204,  204,  204,
     1335,  204, 1335,  204,  204,  204,  204,  983,  204, 1335,
      982,  204,  204,  204,  204,  204, 1335,  204,  204, 1335,
      204,  204,  204, 1335,  204,  204,  204,  204,  204, 1335,
      204,  204,  204, 1335,  983,  204, 1335,  982,  204,  204,
      204,  204,  204, 1335,  204,  204,  204, 1335,  204,  204,
      204,  204,  204,  984,  204,  204,  204,  204,  204, 1335,
     1335,  204,  204, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335,  204, 1335,  204,  204,  204,  204,  204,

      984, 1335, 1335,  204,  204,  204, 1335, 1335,  204,  204,
      204,  204,  204,  204, 1335, 1059,  204,  204,  204,  204,
      204, 1335,  204,  204, 1058,  204,  204, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335,  204,  204,  204,  204,  204,
      204, 1335, 1059,  204,  204,  204,  204,  204, 1335,  204,
      204, 1058,  204,  204, 1060,  204, 1335, 1335,  204,  204,
     1335, 1335,  204,  204,  204,  204, 1335, 1063,  204, 1062,
     1061, 1335,  204,  204,  204,  204, 1335,  204,  204, 1335,
     1335, 1060,  204,  204, 1335,  204,  204, 1335,  204, 1335,
     1335,  204,  204,  204, 1063,  204, 1062, 1061, 1335,  204,

      204,  204,  204, 1335,  204,  204, 1064,  204,  204, 1065,
      204, 1335,  204, 1335,  204,  204, 1335, 1335,  204,  204,
      204, 1335, 1335, 1335, 1335, 1335, 1335, 1335,  204, 1335,
      204, 1335,  204, 1064,  204,  204, 1065,  204, 1066,  204,
      204,  204,  204, 1068,  204,  204,  204,  204,  204,  204,
     1067, 1069,  204,  204, 1335,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204, 1066, 1070,  204,  204,  204,
     1068,  204,  204, 1335,  204,  204,  204, 1067, 1069,  204,
      204, 1335,  204,  204, 1335,  204, 1335,  204,  204,  204,
      204, 1335,  204, 1070, 1335,  204,  204, 1072, 1335,  204,

     1074,  204, 1071, 1335,  204,  204, 1073, 1335,  204,  204,
      204,  204,  204,  204, 1335, 1335, 1335, 1335,  204,  204,
      204,  204, 1335,  204, 1072, 1335,  204, 1074,  204, 1071,
      204,  204,  204, 1073, 1335,  204,  204,  204,  204,  204,
      204, 1335, 1335, 1335, 1335,  204,  204,  204,  204, 1335,
      204,  204, 1335,  204, 1075,  204, 1335,  204, 1335, 1335,
      204,  204,  204,  204, 1077, 1335, 1076, 1335, 1335,  204,
      204,  204, 1335,  204,  204, 1078, 1335,  204,  204,  204,
     1079, 1075,  204, 1335,  204,  204, 1335,  204,  204,  204,
      204, 1077, 1335, 1076, 1335,  204,  204,  204,  204,  204,

      204,  204, 1078,  204, 1335, 1335,  204, 1079,  204,  204,
      204,  204,  204, 1335, 1080, 1082, 1335,  204, 1335,  204,
      204, 1335,  204, 1335,  204, 1335,  204,  204,  204, 1335,
      204, 1335, 1335, 1335,  204,  204,  204,  204, 1335, 1081,
     1335, 1080, 1082, 1335,  204, 1335,  204,  204,  204, 1335,
     1335,  204, 1083,  204, 1335,  204, 1335,  204,  204, 1335,
     1335,  204, 1087,  204,  204, 1335, 1081, 1335,  204,  204,
     1084,  204,  204,  204,  204,  204,  204, 1335, 1335, 1083,
      204, 1335,  204, 1335,  204,  204, 1335, 1335, 1335, 1087,
      204,  204,  204, 1335,  204,  204,  204, 1084,  204,  204,

      204,  204,  204,  204,  204, 1335,  204, 1335, 1335,  204,
     1335, 1335,  204, 1335,  204, 1335, 1335, 1335, 1335,  204,
     1085,  204,  204, 1335, 1335,  204, 1335, 1335,  204,  204,
     1335,  204,  204,  204, 1335, 1335, 1335, 1335,  204,  204,
     1335,  204, 1335, 1086,  204, 1089,  204, 1085,  204,  204,
      204, 1088,  204, 1335, 1335,  204,  204,  204, 1335,  204,
     1335, 1335,  204, 1335, 1335,  204, 1335, 1335, 1335, 1335,
     1086,  204, 1089,  204,  204,  204,  204,  204, 1088,  204,
      204,  204,  204,  204,  204, 1335,  204,  204,  204,  204,
      204, 1335,  204, 1335, 1335,  204, 1090, 1335, 1335, 1335,

      204,  204, 1335,  204,  204, 1335,  204,  204,  204,  204,
     1335,  204, 1335,  204,  204,  204,  204,  204,  204,  204,
      204, 1335,  204, 1090, 1335,  204, 1335,  204, 1335, 1335,
      204,  204,  204,  204,  204, 1335, 1335, 1335,  204,  204,
     1091, 1335, 1335,  204,  204,  204,  204,  204,  204, 1335,
     1092, 1335,  204, 1093,  204, 1335, 1094,  204,  204,  204,
      204,  204, 1095, 1335,  204, 1335,  204, 1091, 1335,  204,
      204,  204, 1335,  204,  204,  204, 1335, 1092, 1335, 1335,
     1093,  204, 1335, 1094, 1335,  204,  204,  204,  204, 1095,
     1335,  204,  204,  204,  204, 1335,  204,  204,  204,  204,

     1335,  204, 1096, 1335,  204, 1335, 1335, 1335, 1335, 1335,
      204, 1335,  204,  204, 1335,  204,  204,  204,  204,  204,
      204,  204,  204,  204, 1335,  204,  204, 1335,  204, 1096,
     1335,  204, 1335, 1335,  204, 1335,  204,  204, 1097,  204,
     1335,  204,  204,  204,  204,  204,  204, 1335,  204,  204,
      204, 1335,  204, 1335,  204,  204, 1335, 1335,  204, 1098,
     1335,  204, 1335,  204,  204, 1097, 1335, 1335,  204,  204,
     1335, 1099, 1335,  204, 1335,  204, 1335, 1335, 1335,  204,
     1335,  204,  204, 1335,  204,  204, 1098, 1335,  204,  204,
      204,  204, 1335, 1335,  204,  204, 1100, 1101, 1099, 1335,

      204,  204, 1335,  204, 1335, 1335, 1335, 1335,  204,  204,
     1335,  204, 1335,  204, 1335,  204,  204,  204, 1335, 1335,
     1335,  204,  204, 1100, 1101, 1335, 1335,  204,  204,  204,
      204,  204,  204, 1335,  204,  204,  204, 1102, 1335,  204,
      204,  204, 1103,  204,  204,  204,  204, 1335, 1335, 1335,
      204, 1335,  204, 1335, 1335,  204,  204, 1335,  204,  204,
     1335,  204,  204,  204, 1102, 1335,  204, 1335,  204, 1103,
      204,  204,  204,  204, 1335, 1335,  204,  204, 1335,  204,
      204, 1335,  204, 1105,  204, 1335,  204, 1335,  204,  204,
     1335, 1104, 1335, 1335,  204, 1335,  204, 1335, 1335, 1335,

     1335, 1335, 1335,  204,  204, 1335, 1335,  204, 1335, 1335,
     1105,  204,  204,  204, 1335,  204,  204, 1335, 1104, 1335,
      204,  204,  204,  204,  204, 1106, 1335, 1335, 1335, 1335,
      204,  204,  204, 1107,  204, 1335, 1335, 1335,  204,  204,
      204, 1335, 1335,  204,  204, 1335, 1108,  204, 1335,  204,
      204,  204, 1106, 1335,  204, 1335,  204,  204,  204,  204,
     1107,  204, 1109, 1335, 1335,  204,  204,  204,  204, 1335,
      204,  204, 1335, 1108,  204, 1335, 1335,  204,  204, 1335,
      204,  204, 1335,  204, 1110,  204, 1335, 1335,  204, 1109,
      204, 1335,  204,  204, 1335,  204, 1111,  204,  204, 1335,

      204,  204,  204, 1335,  204,  204,  204,  204,  204, 1335,
      204, 1110,  204, 1112,  204,  204, 1335,  204,  204,  204,
      204, 1335,  204, 1111,  204,  204,  204,  204,  204,  204,
     1114,  204,  204,  204,  204,  204,  204,  204,  204,  204,
     1112,  204, 1335, 1113, 1335,  204,  204,  204,  204,  204,
     1335,  204, 1335,  204, 1116,  204, 1335, 1114,  204,  204,
     1335,  204,  204,  204, 1335,  204, 1115,  204,  204, 1335,
     1113,  204,  204,  204,  204,  204, 1335,  204,  204, 1117,
     1335, 1116, 1335, 1335,  204,  204, 1335,  204, 1335,  204,
      204, 1335,  204, 1115,  204,  204, 1118,  204,  204,  204,

     1335,  204,  204, 1335,  204,  204, 1117, 1335,  204, 1335,
      204,  204, 1335, 1335,  204,  204, 1119,  204, 1335,  204,
      204, 1120, 1335, 1118,  204, 1335, 1335, 1121, 1335,  204,
     1335, 1335,  204, 1335,  204,  204, 1335,  204,  204,  204,
      204, 1335,  204, 1119,  204,  204, 1335,  204, 1120, 1335,
      204,  204, 1335, 1122, 1121, 1335, 1335, 1335,  204,  204,
     1335,  204,  204,  204,  204,  204,  204,  204, 1335,  204,
     1335,  204,  204, 1335,  204, 1335, 1335,  204,  204, 1335,
     1122, 1335, 1123, 1124,  204,  204,  204, 1335,  204,  204,
      204,  204,  204, 1335,  204, 1335,  204, 1335, 1335, 1335,

     1335,  204,  204, 1335,  204, 1335, 1335, 1335, 1125, 1123,
     1124,  204,  204,  204, 1335,  204,  204, 1335,  204,  204,
      204,  204, 1335, 1335, 1335,  204,  204,  204,  204,  204,
     1335,  204, 1126, 1127, 1335, 1125,  204,  204, 1335,  204,
     1335, 1335, 1335,  204,  204,  204,  204,  204, 1335, 1335,
     1335,  204,  204,  204,  204,  204,  204, 1128, 1335, 1126,
     1127, 1335, 1335,  204,  204,  204, 1335,  204,  204, 1335,
      204,  204,  204,  204,  204,  204,  204,  204,  204, 1335,
      204,  204, 1335,  204, 1128, 1335,  204, 1335, 1335, 1335,
     1335, 1335,  204, 1335,  204,  204, 1173,  204, 1335,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204, 1335, 1174,  204, 1176,  204,  204,  204,  204,  204,
     1335,  204,  204, 1173,  204,  204,  204,  204,  204, 1335,
     1175,  204,  204,  204,  204,  204,  204,  204, 1335, 1174,
      204, 1176,  204,  204,  204,  204,  204, 1335,  204,  204,
      204,  204,  204,  204,  204,  204, 1335, 1175,  204, 1335,
      204,  204,  204, 1335,  204, 1177,  204,  204, 1335, 1335,
      204, 1178,  204, 1179,  204,  204,  204,  204, 1335,  204,
      204,  204, 1335, 1335,  204,  204, 1335,  204, 1335, 1335,
     1335,  204, 1177,  204, 1335, 1335, 1335,  204, 1178,  204,

     1179,  204,  204,  204, 1335, 1335,  204,  204,  204, 1335,
      204,  204,  204, 1335,  204,  204,  204,  204, 1181,  204,
      204,  204, 1180, 1335,  204, 1335,  204, 1335, 1335,  204,
     1335, 1335, 1335, 1335, 1335,  204, 1335,  204, 1335, 1335,
     1335,  204,  204,  204,  204, 1181,  204,  204,  204, 1180,
     1182,  204, 1335,  204, 1335, 1183,  204,  204, 1335,  204,
     1335,  204,  204, 1335, 1335, 1335,  204,  204,  204, 1335,
      204,  204, 1335, 1335, 1335,  204, 1184, 1182, 1335, 1335,
      204, 1335, 1183, 1335,  204, 1335,  204, 1335,  204,  204,
     1335, 1335, 1335,  204,  204,  204, 1335,  204,  204,  204,

     1185,  204,  204, 1184, 1335, 1335,  204,  204, 1335, 1335,
      204,  204,  204,  204, 1335,  204, 1335,  204, 1335, 1335,
      204, 1335,  204, 1335, 1335,  204,  204, 1185,  204, 1335,
     1335, 1335, 1186,  204, 1335, 1335, 1335,  204,  204,  204,
      204,  204,  204,  204,  204, 1335, 1335,  204,  204,  204,
     1335, 1335,  204,  204,  204,  204,  204,  204, 1335, 1186,
     1335,  204,  204, 1335, 1335, 1335,  204,  204,  204, 1335,
      204, 1335, 1335, 1335, 1335,  204, 1335, 1335, 1335, 1335,
      204,  204,  204,  204,  204,  204, 1187,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204, 1335,

     1188,  204, 1335, 1335, 1335,  204,  204, 1335, 1335, 1335,
      204,  204,  204, 1187,  204, 1335, 1335,  204,  204,  204,
     1335, 1335,  204,  204,  204,  204, 1335, 1188,  204, 1335,
     1335, 1335,  204,  204,  204,  204,  204,  204,  204, 1190,
      204,  204, 1189, 1335,  204,  204,  204, 1335, 1335, 1335,
      204, 1335, 1335, 1335,  204,  204, 1335, 1335,  204, 1335,
      204,  204,  204,  204,  204, 1335, 1190,  204,  204, 1189,
     1335,  204,  204,  204,  204, 1335,  204,  204, 1335,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
     1335,  204, 1335, 1335,  204, 1335,  204, 1335,  204,  204,

     1335,  204,  204,  204,  204, 1335,  204,  204,  204, 1335,
      204,  204, 1335,  204, 1335,  204,  204, 1335,  204, 1335,
      204,  204, 1335,  204,  204,  204,  204, 1335, 1192,  204,
      204,  204,  204, 1191, 1335,  204, 1335, 1335,  204, 1335,
      204, 1335, 1193, 1335, 1335,  204,  204,  204,  204, 1335,
      204,  204, 1335, 1335,  204, 1192,  204,  204,  204,  204,
     1191, 1335, 1335, 1335,  204,  204,  204,  204,  204, 1193,
     1335, 1335,  204,  204,  204,  204, 1335,  204,  204, 1335,
      204,  204,  204,  204, 1335,  204, 1335, 1194,  204, 1335,
     1335,  204,  204,  204, 1335,  204,  204, 1335,  204,  204,

     1335,  204, 1335,  204, 1195,  204,  204,  204,  204,  204,
      204,  204,  204, 1335, 1194,  204,  204,  204, 1335,  204,
     1335, 1335,  204,  204, 1335,  204, 1335, 1335, 1335, 1196,
      204, 1195, 1335,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204, 1335,  204,  204, 1335,  204,
     1335, 1335,  204, 1335, 1335, 1335, 1196, 1335,  204, 1335,
      204,  204, 1335,  204, 1335,  204, 1197,  204,  204,  204,
      204,  204, 1335,  204,  204, 1198,  204, 1335, 1335,  204,
     1199,  204, 1335, 1335, 1200,  204,  204,  204,  204, 1335,
     1335,  204,  204, 1197,  204, 1335,  204,  204,  204, 1335,

     1335, 1335, 1198,  204,  204, 1335,  204, 1199,  204, 1335,
      204, 1200, 1335,  204, 1335,  204,  204, 1335,  204, 1335,
      204,  204, 1335,  204,  204, 1335, 1201, 1335, 1335, 1335,
      204,  204, 1202,  204,  204, 1335, 1335,  204,  204, 1335,
      204, 1335, 1335,  204,  204, 1335, 1203,  204,  204, 1335,
     1335,  204,  204, 1201,  204, 1335, 1335,  204,  204, 1202,
     1335,  204,  204, 1335,  204,  204, 1335,  204,  204, 1204,
      204,  204,  204, 1203,  204,  204,  204, 1205,  204,  204,
     1335,  204,  204,  204, 1335,  204, 1335, 1335,  204,  204,
     1335,  204, 1335, 1335, 1335,  204, 1204,  204, 1335,  204,

      204,  204, 1206,  204, 1205,  204,  204,  204,  204,  204,
      204, 1335,  204,  204, 1207,  204,  204, 1335,  204, 1335,
     1335,  204, 1335, 1335, 1335, 1335,  204,  204, 1335, 1206,
      204, 1335,  204,  204,  204,  204, 1335,  204, 1208,  204,
      204, 1207,  204,  204, 1335,  204, 1335, 1335,  204,  204,
     1238,  204, 1335,  204,  204, 1335,  204,  204, 1335,  204,
      204,  204, 1209, 1210,  204, 1208, 1335, 1335, 1335,  204,
      204, 1335,  204,  204,  204,  204,  204, 1238,  204,  204,
      204,  204, 1335,  204,  204,  204, 1335,  204,  204, 1209,
     1210, 1335, 1335, 1335, 1335, 1335,  204,  204,  204,  204,

      204,  204,  204,  204, 1211, 1335,  204,  204,  204, 1212,
     1335,  204,  204, 1335,  204, 1335,  204,  204, 1335,  204,
      204,  204,  204,  204,  204,  204,  204,  204, 1335,  204,
      204, 1211,  204, 1335, 1335,  204, 1212, 1335,  204, 1335,
      204,  204, 1335,  204,  204,  204,  204,  204,  204,  204,
      204,  204, 1335,  204,  204, 1335,  204, 1335, 1335,  204,
     1335,  204, 1335,  204,  204,  204,  204,  204,  204, 1335,
     1213,  204,  204,  204, 1335, 1335,  204,  204, 1335, 1335,
     1214, 1335,  204, 1335, 1335, 1335, 1335,  204,  204, 1335,
      204,  204,  204,  204,  204,  204,  204, 1213,  204, 1335,

      204,  204, 1335,  204, 1335, 1335,  204, 1214,  204,  204,
      204, 1335, 1335, 1335,  204,  204, 1335, 1335, 1335,  204,
      204,  204,  204,  204,  204, 1335, 1335, 1335,  204,  204,
     1335, 1335, 1335,  204,  204,  204,  204,  204,  204, 1335,
      204, 1335,  204,  204,  204, 1335, 1335,  204,  204,  204,
      204,  204, 1335, 1335,  204, 1335,  204, 1335,  204, 1335,
      204,  204, 1335,  204,  204,  204, 1335,  204, 1239, 1217,
      204,  204, 1335, 1335,  204,  204, 1335,  204, 1240, 1335,
     1335,  204,  204, 1335, 1335,  204, 1335,  204,  204, 1335,
     1335,  204, 1241,  204, 1335, 1335,  204,  204,  204, 1335,

      204,  204, 1335,  204, 1335, 1240,  204, 1335,  204,  204,
     1335, 1335,  204,  204, 1335,  204,  204, 1335,  204, 1241,
      204, 1335,  204,  204,  204,  204,  204,  204,  204, 1335,
      204, 1335,  204,  204, 1242,  204, 1335,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204, 1335,  204,
      204, 1335, 1243,  204,  204,  204,  204,  204, 1335,  204,
     1335, 1242, 1335, 1335,  204,  204,  204, 1335,  204,  204,
     1335,  204,  204,  204,  204, 1335,  204,  204, 1335, 1243,
     1335,  204,  204,  204,  204,  204, 1335, 1335, 1335,  204,
     1335, 1335,  204,  204,  204,  204, 1244, 1335, 1335,  204,

     1335,  204, 1335,  204, 1335,  204,  204, 1335,  204,  204,
      204, 1335,  204, 1335, 1335,  204,  204, 1335, 1245,  204,
      204,  204,  204, 1244, 1246, 1335,  204,  204,  204,  204,
     1335,  204,  204,  204,  204,  204,  204,  204, 1335,  204,
     1335, 1335,  204, 1335, 1335, 1245, 1335,  204,  204, 1335,
      204, 1246, 1335,  204,  204,  204,  204,  204,  204,  204,
      204,  204, 1335,  204,  204, 1335,  204, 1335, 1335,  204,
     1335, 1335, 1335, 1335, 1335,  204, 1335,  204, 1335, 1335,
     1335, 1335,  204,  204,  204,  204,  204,  204, 1248, 1247,
      204,  204,  204,  204, 1335,  204,  204,  204,  204,  204,

     1335, 1250,  204, 1249,  204, 1335,  204, 1335,  204,  204,
      204,  204,  204,  204,  204, 1248, 1247,  204, 1335,  204,
      204, 1335,  204, 1335,  204,  204,  204, 1335, 1250,  204,
     1249,  204,  204,  204,  204,  204,  204, 1335,  204,  204,
      204,  204, 1335,  204,  204,  204, 1335, 1335, 1335, 1335,
      204, 1251, 1335, 1335, 1335,  204,  204, 1335,  204,  204,
     1335,  204, 1335,  204, 1335, 1335,  204, 1335,  204, 1335,
      204,  204,  204, 1252,  204, 1335,  204,  204, 1251, 1335,
     1335,  204,  204,  204, 1335,  204,  204,  204, 1335,  204,
      204, 1335, 1335, 1335,  204,  204, 1335, 1335, 1335,  204,

     1252,  204, 1335,  204, 1335, 1335, 1335, 1335,  204, 1335,
      204, 1335,  204,  204,  204, 1335,  204,  204, 1253, 1335,
     1335,  204,  204,  204, 1335,  204,  204, 1335, 1335, 1335,
      204,  204, 1255,  204,  204,  204,  204,  204,  204,  204,
     1254,  204, 1335,  204,  204, 1253,  204, 1335, 1335,  204,
      204, 1335,  204, 1335, 1335, 1335, 1335,  204,  204, 1255,
      204,  204,  204,  204,  204,  204,  204, 1254,  204, 1335,
      204,  204, 1256,  204, 1257, 1258,  204,  204,  204,  204,
     1335,  204, 1335, 1335,  204,  204, 1335,  204, 1335, 1335,
     1335,  204, 1335,  204,  204,  204, 1335,  204,  204, 1256,

     1335, 1257, 1258,  204,  204,  204,  204, 1335,  204,  204,
     1335,  204,  204,  204,  204, 1335, 1335, 1335, 1335,  204,
     1335,  204,  204,  204,  204, 1335, 1335,  204,  204,  204,
     1335, 1335,  204,  204, 1335, 1335,  204, 1335,  204, 1335,
      204, 1273, 1335,  204, 1335, 1335,  204,  204,  204, 1335,
      204,  204, 1335, 1335,  204,  204,  204,  204, 1335,  204,
      204, 1335, 1275, 1335, 1335,  204, 1335,  204, 1273, 1335,
      204, 1335,  204,  204,  204,  204,  204,  204,  204, 1335,
     1335, 1335,  204,  204,  204, 1335,  204,  204, 1276, 1275,
      204,  204,  204,  204,  204, 1335,  204,  204, 1335,  204,

      204,  204, 1277,  204,  204,  204,  204,  204, 1335,  204,
      204,  204, 1335,  204,  204, 1276, 1335,  204,  204,  204,
      204,  204, 1335,  204,  204, 1335,  204,  204,  204, 1277,
      204,  204,  204,  204,  204, 1335,  204,  204,  204, 1335,
     1278, 1335, 1335,  204, 1280, 1279,  204,  204,  204,  204,
      204,  204, 1335,  204,  204,  204,  204,  204,  204, 1335,
     1335,  204, 1335,  204,  204, 1335, 1335, 1278, 1335, 1335,
      204, 1280, 1279,  204,  204, 1335,  204,  204,  204,  204,
     1335,  204,  204,  204, 1335,  204,  204,  204,  204, 1335,
     1335,  204,  204,  204, 1335,  204, 1335,  204, 1335, 1335,

      204, 1335, 1335, 1335, 1335,  204,  204, 1335,  204, 1335,
     1335,  204,  204,  204,  204,  204, 1335, 1335,  204,  204,
      204,  204,  204, 1335,  204,  204, 1335,  204, 1335,  204,
      204, 1281,  204,  204, 1283,  204, 1282,  204,  204, 1335,
      204, 1335,  204,  204, 1335,  204, 1335, 1335,  204, 1335,
      204, 1335,  204,  204, 1284,  204,  204,  204, 1281,  204,
      204, 1283,  204, 1282,  204,  204, 1335,  204, 1292, 1286,
      204, 1335,  204, 1335, 1294,  204, 1335,  204,  204,  204,
      204, 1284,  204,  204,  204, 1335,  204, 1335,  204,  204,
      204, 1335,  204,  204,  204, 1295, 1335,  204, 1335,  204,

      204, 1294,  204,  204, 1335,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204, 1295, 1335,  204, 1335,  204,  204,  204, 1335,
      204,  204, 1335,  204,  204,  204,  204, 1335,  204,  204,
      204,  204,  204,  204,  204,  204,  204, 1335, 1335,  204,
      204, 1335,  204, 1335,  204,  204, 1335,  204,  204, 1335,
      204, 1335,  204,  204, 1335,  204, 1335,  204,  204,  204,
      204,  204,  204, 1296, 1335, 1335,  204,  204,  204,  204,
     1335,  204,  204,  204,  204, 1335,  204,  204,  204,  204,
      204,  204,  204, 1335,  204,  204,  204,  204, 1304,  204,

     1296, 1335,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204, 1335,  204,  204,  204,  204, 1335,  204,  204,
     1335, 1335, 1335,  204,  204, 1304, 1335, 1335, 1335,  204,
      204,  204, 1335,  204,  204,  204, 1335, 1335,  204, 1335,
     1335, 1335, 1335,  204,   46,   46,   46,   46,   46,   88,
     1335, 1335,   88,   88,  187,  187,  187, 1335,  187,  189,
     1335,  189,  189,  189,  192, 1335,  192,  192,  192,  204,
     1335,  204,  204,  204,    7, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335
    } ;

static const flex_int16_t yy_chk[8852] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   19,   19,   20,   20,   21,   22,   21,   27,   28,
       22,   23,   30,   21,   27,   21,   22,   28,   23,   21,

       21,   31,   41,   28,   41,   23,   22,   41,   23, 1338,
       44,   23,   21,   22,   21,   27,   28,   22,   23,   30,
       21,   27,   21,   22,   28,   23,   21,   21,   31,   41,
       28,   41,   23,   22,   41,   23,   24,   44,   23,   25,
       24,   25,   49,   49,   24,   32,   25,  101,   33,   32,
       24,   25,   33,   24,   55,   32,   50,   50,   33,   43,
       43,   58,   58,   24, 1332,   55,   25,   24,   25, 1331,
       34,   24,   32,   25,  101,   33,   32,   24,   25,   33,
       24,   26,   32,   36,   34,   33,   43,   43, 1330,   26,
       34,   34,   26,  102,   36,   26,   29,   34,   26, 1329,

       36,   26,   29,   29,   29,   42,   59,   59,   26,   29,
       36,   34, 1327,   42,   60,   60,   26,   34,   34,   26,
      102,   36,   26,   29, 1325,   26,   35,   36,   26,   29,
       29,   29,   42,  105,   35,   38,   29,  103,   35,   38,
       42,   35,   35,   38,   81,  103,   81,  106,   81,   38,
     1323,   81, 1321,   35,   86,   86,   81,  190,  190,  108,
      105,   35,   38, 1319,  103,   35,   38, 1317,   35,   35,
       38,   81,  103,   81,  106,   81,   38,   39,   81,   39,
      109,  104,   39,   81,  104,   39,  108,   39,  112,   39,
       39,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56, 1137, 1137,  111,   39, 1315,   39,  109,  104,   39,
      111,  104,   39,  115,   39,  112,   39,   39,   40,  114,
      119,   67,   40,   67,  120,   40,   40,   67,   67,  114,
      111,  121,   40,   67,  122,   40, 1313,  111, 1260, 1260,
      115, 1311, 1309, 1307, 1305,   40,  114,  119,   67,   40,
       67,  120,   40,   40,   67,   67,  114, 1301,  121,   40,
       67,  122,   40,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   61,   61,  123,   61,   61,   61,
       61,   61,   61,  125,   68,  126, 1297, 1291,   68, 1285,
      107,  107,   68,   61,   61,   61,   70,  116,   68,   61,

       70,   61,  116,  123,  107,  127,   70,   61,   68,   61,
      125,   68,  126,   61,   61,   68,   70,  107,  107,   68,
      118,  118, 1272,   70,  116,   68,   61,   70,   61,  116,
     1259,  107,  127,   70,   61,   68,   61, 1237,  129, 1215,
       61,   61, 1172,   70, 1129, 1057,  985,  118,  118,   61,
       62,   62,  889,   62,   62,   62,   62,   62,   62,  793,
      668,  130,   71,   72,   73,  129,   71,   72,   73,   62,
       62,   62,   71,   72,   73,  131,   62,   77,  132,  128,
       62,   77,   71,   72,   73,  128,   62,   77,  130,   71,
       72,   73,  134,   71,   72,   73,   62,   77,  543,   71,

       72,   73,  131,   62,   77,  132,  128,   62,   77,   71,
       72,   73,  128,   62,   77,  418,  292,   83,  135,  134,
       83,   83,  137,   62,   77,   62,   63,   83,   78,  138,
       63,  140,   78,   63,   63,  133,   78,   83,  133,  141,
       63,  142,   78,   63,   83,  135,   63,   83,   83,  137,
       63,  194,   78,   63,   83,   78,  138,   63,  140,   78,
       63,   63,  133,   78,   83,  133,  141,   63,  142,   78,
       63,  192,   90,   63,   88,   85,   82,   63,   64,   78,
       82,   84,   64,  139,   82,   84,   64,  143,  146,  147,
       82,   84,   64,  139,  144,   64,  144,  148,  139,  139,

       82,   84,   64,   82,   52,   64,   51,   82,   84,   64,
      139,   82,   84,   64,  143,  146,  147,   82,   84,   64,
      139,  144,   64,  144,  148,  139,  139,   82,   84,   64,
       65,  113,  113,  113,   65,  113,  117,   65,  117,   65,
       65,  117,  149,  145,   65,  145,  151,  117,  152,   65,
       65,   47,  150,  153,  117,  150,  145,   65,  113,  113,
      113,   65,  113,  117,   65,  117,   65,   65,  117,  149,
      145,   65,  145,  151,  117,  152,   65,   65,   66,  150,
      153,  117,  150,  145,  155,   66,   66,  156,  157,   66,
      158,  124,   66,  124,  159,   66,  160,  124,   66,   45,

      160,  161,   11,  163,  124,   66,    7,    4,  124,  165,
        3,  155,   66,   66,  156,  157,   66,  158,  124,   66,
      124,  159,   66,  160,  124,   66,   69,  160,  161,  162,
      163,  124,   69,   69,   69,  124,  165,  164,  168,   69,
      166,  167,  162,  169,   69,    0,  170,  162,  164,  166,
      171,  172,    0,   69,  174,  167,  162,  166,  175,   69,
       69,   69,    0,  176,  164,  168,   69,  166,  167,  162,
      169,   69,   74,  170,  162,  164,  166,  171,  172,   74,
      173,  174,  167,  177,  166,  175,   74,  179,  178,   74,
      176,  173,   74,   74,    0,  178,  180,  183,  178,   74,

        0,    0,  184,  177,  182,  185,   74,  173,    0,    0,
      177,    0,  295,   74,  179,  178,   74,  182,  173,   74,
       74,   75,  178,  180,  183,  178,   75,  181,   75,  184,
      177,  182,  185,  181,   75,   75,  204,  297,   75,  295,
      204,   75,   75,    0,  182,    0,  204,  298,   75,    0,
        0,  300,  302,   75,  181,   75,  204,    0,    0,  303,
      181,   75,   75,  204,  297,   75,  304,  204,   75,   75,
       76,  205,  205,  204,  298,  305,  205,   76,  300,  302,
      306,   76,  205,  204,   76,  206,  303,   76,  307,  206,
       76,    0,  205,  304,  309,  206,    0,   76,  205,  205,

      206,    0,  305,  205,   76,  206,  310,  306,   76,  205,
      311,   76,  206,    0,   76,  307,  206,   76,   79,  205,
       79,  309,  206,   79,   79,    0,   79,  206,   79,  312,
       79,   79,  206,  310,  313,  314,  315,  311,  316,  317,
       79,    0,  318,    0,    0,   79,    0,   79,    0,    0,
       79,   79,  207,   79,  207,   79,  312,   79,   79,  207,
      207,  313,  314,  315,  207,  316,  317,   79,   80,  318,
      213,  209,   80,  209,  213,   80,   80,  209,  209,  207,
      213,  207,   80,  209,  319,   80,  207,  207,  320,  321,
      213,  207,   80,    0,    0,   80,    0,  213,  209,   80,

      209,  213,   80,   80,  209,  209,    0,  213,    0,   80,
      209,  319,   80,    0,    0,  320,  321,  213,    0,   80,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  208,  210,  212,  208,  308,  323,  308,  212,
      324,  212,  210,  208,  210,  208,  212,  325,    0,  210,

      208,  212,    0,  308,  210,  208,    0,    0,    0,  208,
      210,  212,  208,  308,  323,  308,  212,  324,  212,  210,
      208,  210,  208,  212,  325,  214,  210,  208,  212,  214,
      308,  210,  208,  211,  211,  214,  215,  326,  215,  211,
      322,  211,    0,  215,    0,  214,  211,  211,  215,    0,
      327,  211,  214,  328,    0,  322,  214,  330,  216,  331,
      211,  211,  214,  215,  326,  215,  211,  322,  211,  216,
      215,  216,  214,  211,  211,  215,  216,  327,  211,    0,
      328,  216,  322,    0,  330,  216,  331,  218,    0,    0,
      332,  218,  333,  334,    0,    0,  216,  218,  216,  335,

      336,  337,  219,  216,    0,  338,  219,  218,  216,  217,
      217,  217,  219,  217,  218,  219,  217,  332,  218,  333,
      334,  217,  219,  339,  218,  340,  335,  336,  337,  219,
      341,  220,  338,  219,  218,  220,  217,  217,  217,  219,
      217,  220,  219,  217,  342,  343,  220,  344,  217,  219,
      339,  220,  340,  345,    0,  346,  347,  341,  220,  348,
        0,  349,  220,    0,  350,    0,    0,    0,  220,  351,
        0,  342,  343,  220,  344,    0,  352,  353,  220,  221,
      345,  221,  346,  347,  221,  355,  348,  222,  349,  222,
      221,  350,  221,  222,  222,    0,  351,  221,  223,  222,

      223,    0,  221,  352,  353,  223,  221,  223,  221,  356,
      223,  221,  355,  358,  222,    0,  222,  221,  224,  221,
      222,  222,  224,    0,  221,  223,  222,  223,  224,  221,
        0,  359,  223,  354,  223,    0,  356,  223,  224,  225,
      358,  225,  226,  354,    0,  224,  225,    0,  360,  224,
      226,  225,  226,    0,    0,  224,  361,  226,  359,    0,
      354,  363,  226,    0,  364,  224,  225,  365,  225,  226,
      354,  227,  366,  225,  229,  360,  229,  226,  225,  226,
      227,  229,  227,  361,  226,  367,  229,  227,  363,  226,
      362,  364,  227,    0,  365,    0,    0,  369,  227,  366,

      362,  229,  370,  229,    0,    0,    0,  227,  229,  227,
        0,  371,  367,  229,  227,    0,  230,  362,  230,  227,
      228,  231,  228,  230,  369,  231,  228,  362,  230,  370,
      372,  231,  228,  228,  373,  374,  375,  228,  371,    0,
        0,  231,  228,  230,    0,  230,    0,  228,  231,  228,
      230,  377,  231,  228,  379,  230,    0,  372,  231,  228,
      228,  373,  374,  375,  228,  232,  233,  232,  231,  228,
      233,  232,  232,  234,    0,  234,  233,  232,  377,  380,
      234,  379,    0,  378,    0,  234,  233,    0,    0,    0,
      381,  235,  232,  233,  232,  235,  378,  233,  232,  232,

      234,  235,  234,  233,  232,  236,  380,  234,  382,  236,
      378,  235,  234,  233,  237,  236,  237,  381,  235,  383,
      384,  237,  235,  378,  237,  236,  237,  238,  235,  238,
        0,    0,  236,    0,  238,  382,  236,    0,  235,  238,
        0,  237,  236,  237,  385,  386,  383,  384,  237,    0,
      387,  237,  236,  237,  238,  239,  238,  239,  240,  241,
      240,  238,  239,  241,  239,  240,  238,  239,  388,  241,
      240,  385,  386,  389,  376,    0,  244,  387,  244,  241,
      391,    0,  239,  244,  239,  240,  241,  240,  244,  239,
      241,  239,  240,  376,  239,  388,  241,  240,  242,  392,

      389,  376,  242,  244,  393,  244,  241,  391,  242,  242,
      244,    0,  245,  246,    0,  244,  245,  246,  242,    0,
      376,  394,  245,  246,    0,  242,  392,    0,  395,  242,
        0,  393,  245,  246,    0,  242,  242,  247,  247,  245,
      246,  247,  396,  245,  246,  242,  243,  247,  394,  245,
      246,  251,  397,  251,  243,  395,  243,  247,  251,  245,
      246,  243,  243,  251,  247,  247,  243,    0,  247,  396,
      398,    0,    0,  243,  247,    0,    0,    0,  251,  397,
      251,  243,  399,  243,  247,  251,    0,    0,  243,  243,
      251,  400,  401,  243,  248,  403,    0,  398,  248,  250,

      248,  250,  248,  261,  248,  250,  250,  261,  405,  399,
        0,  250,  407,  261,  248,    0,  408,    0,  400,  401,
        0,  248,  403,  261,    0,  248,  250,  248,  250,  248,
      261,  248,  250,  250,  261,  405,  409,  404,  250,  407,
      261,  248,  249,  408,  249,  252,  404,  252,  410,  406,
      261,  406,  252,  249,  253,  249,  253,  252,  411,  412,
      249,  253,  253,  409,  404,  249,  253,    0,  413,  249,
        0,  249,  252,  404,  252,  410,  406,    0,  406,  252,
      249,  253,  249,  253,  252,  411,  412,  249,  253,  253,
        0,    0,  249,  253,  254,  413,  254,  255,    0,  255,

      415,  254,  254,    0,  255,  254,  254,  256,    0,  255,
      258,  414,  258,  416,    0,  414,    0,  258,  256,    0,
      256,  254,  258,  254,  255,  256,  255,  415,  254,  254,
      256,  255,  254,  254,  256,  257,  255,  258,  414,  258,
      416,  257,  414,  257,  258,  256,  259,  256,  257,  258,
        0,  544,  256,  257,  259,    0,  259,  256,    0,    0,
      545,  259,  257,  546,  547,    0,  259,  548,  257,  549,
      257,  550,  551,  259,  552,  257,  554,  260,  544,  260,
      257,  259,  262,  259,  260,  260,  262,  545,  259,  260,
      546,  547,  262,  259,  548,  262,  549,    0,  550,  551,

        0,  552,  262,  554,  260,  557,  260,    0,    0,  262,
      263,  260,  260,  262,  263,  558,  260,  559,  263,  262,
      560,  562,  262,  264,  263,  563,    0,  264,  265,  262,
      265,  564,  557,  264,  263,  265,  565,  263,  567,    0,
      265,  263,  558,  264,  559,  263,  568,  560,  562,    0,
      264,  263,  563,  266,  264,  265,    0,  265,  564,  569,
      264,  263,  265,  565,  266,  567,  266,  265,    0,  570,
      264,  266,  267,  568,  571,  572,  266,  267,  573,  267,
      266,  574,    0,  268,  267,  268,  569,  575,    0,  267,
      268,  266,    0,  266,  268,  268,  570,    0,  266,  267,

      578,  571,  572,  266,  267,  573,  267,  579,  574,  269,
      268,  267,  268,  269,  575,  269,  267,  268,  580,  272,
      269,  268,  268,  272,  271,  269,    0,  578,  271,  272,
      581,  582,  271,  583,  579,    0,  269,    0,  271,  272,
      269,    0,  269,    0,    0,  580,  272,  269,  271,  584,
      272,  271,  269,  270,    0,  271,  272,  581,  582,  271,
      583,    0,  270,  273,  270,  271,  272,  273,  274,  270,
      270,  273,  274,    0,  270,  271,  584,  273,  274,    0,
      270,  274,  586,    0,  587,  588,    0,  273,  274,  270,
      273,  270,  591,  592,  273,  274,  270,  270,  273,  274,

      276,  270,  275,  276,  273,  274,  275,  276,  274,  586,
      275,  587,  588,  276,  273,  274,  275,    0,    0,  591,
      592,  278,  594,  276,    0,  278,  275,  276,    0,  275,
      276,  278,    0,  275,  276,  596,    0,  275,    0,  597,
      276,  278,  598,  275,  277,  277,  277,  599,  278,  594,
      276,  277,  278,  275,    0,  279,  277,  600,  278,  279,
        0,    0,  596,  279,  601,  279,  597,  604,  278,  598,
        0,  277,  277,  277,  599,  279,    0,  280,  277,    0,
      608,  280,  279,  277,  600,  610,  279,  280,  280,  281,
      279,  601,  279,  611,  604,  613,  281,  280,    0,  615,

      283,  283,  279,  281,  280,  283,  281,  608,  280,  281,
        0,  283,  610,    0,  280,  280,  281,    0,    0,  616,
      611,  283,  613,  281,  280,  284,  615,  283,  283,  284,
      281,    0,  283,  281,  617,  284,  281,  282,  283,  619,
      282,    0,    0,  602,  282,  284,  616,  282,  283,  620,
      282,  285,  284,  285,  602,  286,  284,  285,  285,  286,
      282,  617,  284,  285,  282,  286,  619,  282,  286,  287,
      602,  282,  284,  287,  282,  286,  620,  282,  285,  287,
      285,  602,  286,    0,  285,  285,  286,  282,    0,  287,
      285,    0,  286,  288,  621,  286,  287,  288,    0,  622,

      287,  289,  286,  288,  624,  289,  287,  625,  288,  289,
      424,  627,  424,  288,  628,  289,  287,  424,  614,  614,
      288,  621,  424,  629,  288,  289,  622,    0,  289,    0,
      288,  624,  289,    0,  625,  288,  289,  424,  627,  424,
      288,  628,  289,    0,  424,  614,  614,    0,    0,  424,
      629,    0,  289,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  420,  421,  422,  423,  420,  421,  422,
      423,  630,  632,  420,  421,  422,  423,    0,  633,  634,
        0,  635,    0,  420,  421,  422,  423,    0,    0,    0,

      420,  421,  422,  423,  420,  421,  422,  423,  630,  632,
      420,  421,  422,  423,  426,  633,  634,  425,  635,  425,
      420,  421,  422,  423,  425,  426,  427,  426,  427,  425,
      428,    0,  426,  427,  428,    0,  637,  426,  427,    0,
      428,  426,  638,    0,  425,  639,  425,  640,    0,    0,
      428,  425,  426,  427,  426,  427,  425,  428,  429,  426,
      427,  428,  429,  637,  426,  427,  430,  428,  429,  638,
      430,  431,  639,  643,  640,  431,  430,  428,  429,    0,
      432,  431,  432,  644,  430,  429,  430,  432,  645,  429,
      646,  431,  432,  430,  433,  429,  433,  430,  431,  647,

      643,  433,  431,  430,  650,  429,  433,  432,  431,  432,
      644,  430,  435,  430,  432,  645,  435,  646,  431,  432,
        0,  433,  435,  433,    0,  435,  647,    0,  433,    0,
        0,  650,  435,  433,  434,    0,  434,  436,  651,  435,
      434,  436,  653,  435,  654,    0,  434,  436,  655,  435,
      437,  434,  435,  436,  437,    0,  434,  436,  437,  435,
      437,  434,  439,  434,  436,  651,  439,  434,  436,  653,
      437,  654,  439,  434,  436,  655,    0,  437,  434,    0,
      436,  437,  439,  434,  436,  437,  438,  437,    0,  439,
      438,    0,  656,  439,  440,  657,  438,  437,  440,  439,

      658,  438,  440,  441,  659,  441,  438,    0,  440,  439,
      441,  660,    0,  438,    0,  441,    0,  438,  440,  656,
      661,  440,  657,  438,  663,  440,  665,  658,  438,  440,
      441,  659,  441,  438,  442,  440,  442,  441,  660,  443,
      442,  442,  441,  443,  667,  440,  442,  661,  444,  443,
      444,  663,  796,  665,  798,  444,  800,    0,  801,  443,
      444,  442,  445,  442,  445,  802,  443,  442,  442,  445,
      443,  667,    0,  442,  445,  444,  443,  444,    0,  796,
      446,  798,  444,  800,  446,  801,  443,  444,    0,  445,
      446,  445,  802,  803,  447,  448,  445,  804,  447,  448,

      446,  445,  447,    0,  805,  448,  806,  446,  447,  807,
      448,  446,    0,    0,  808,  448,    0,  446,  447,  810,
      803,  447,  448,    0,  804,  447,  448,  446,  449,  447,
      449,  805,  448,  806,  449,  447,  807,  448,  811,  450,
      449,  808,  448,  450,    0,  447,  810,    0,  451,  450,
      449,    0,  451,  812,  813,  449,  814,  449,  451,  450,
        0,  449,    0,  451,    0,  811,  450,  449,  451,    0,
      450,  452,    0,    0,  452,  451,  450,  449,  452,  451,
      812,  813,    0,  814,  452,  451,  450,  454,  815,  453,
      451,  454,  455,  453,  452,  451,  455,  454,  452,  453,

      453,  452,  455,  817,  818,  452,    0,  454,  819,  453,
        0,  452,  455,    0,  454,  815,  453,  820,  454,  455,
      453,  452,    0,  455,  454,    0,  453,  453,  457,  455,
      817,  818,  457,  456,  454,  819,  453,  456,  457,  455,
      458,  456,  458,    0,  820,    0,  458,  456,  457,  459,
        0,  459,  458,  821,  822,  457,  459,  456,  823,  457,
      456,  459,  458,  824,  456,  457,    0,  458,  456,  458,
      460,    0,  460,  458,  456,  457,  459,  460,  459,  458,
      821,  822,  460,  459,  456,  823,  825,  826,  459,  458,
      824,  462,    0,  462,  461,    0,  461,  460,  462,  460,

      461,  461,    0,  462,  460,    0,  461,    0,  829,  460,
      830,    0,  463,  825,  826,    0,  463,  465,  462,  465,
      462,  461,  463,  461,  465,  462,  831,  461,  461,  465,
      462,    0,  463,  461,  464,  829,  832,  830,  464,  463,
        0,    0,  464,  463,  465,    0,  465,    0,  464,  463,
        0,  465,  833,  831,    0,    0,  465,  836,  464,  463,
      839,  464,  840,  832,  842,  464,  466,  466,  466,  464,
      467,  467,  467,  466,  468,  464,  468,  467,  466,  833,
      841,  468,  467,  841,  836,  464,  468,  839,    0,  840,
        0,  842,    0,  466,  466,  466,    0,  467,  467,  467,

      466,  468,  469,  468,  467,  466,  845,  841,  468,  467,
      841,  471,  469,  468,  469,  471,  470,  471,  470,  469,
      848,  849,  471,  470,  469,  470,    0,  471,  470,  469,
        0,  850,  851,  845,  852,  853,    0,  856,  471,  469,
      857,  469,  471,  470,  471,  470,  469,  848,  849,  471,
      470,  469,  470,  472,  471,  470,  473,  472,  850,  851,
      473,  852,  853,  472,  856,  474,  473,  857,    0,  474,
        0,  473,  858,  472,    0,  474,  473,  859,  474,    0,
      472,  860,    0,  473,  472,  474,    0,  473,  862,    0,
      472,  475,  474,  473,    0,  475,  474,  475,  473,  858,

      472,  475,  474,  473,  859,  474,  476,  863,  860,  477,
      476,  475,  474,  477,    0,  862,  476,  865,  475,  477,
        0,  478,  475,  866,  475,  478,  476,  867,  475,  477,
        0,  478,    0,  476,  863,  479,  477,  476,  475,  479,
      477,  478,    0,  476,  865,  479,  477,  480,  478,  868,
      866,  480,  478,  476,  867,  479,  477,  480,  478,  481,
        0,    0,  479,  481,  870,    0,  479,  480,  478,  481,
        0,  871,  479,  872,  480,  481,  868,  873,  480,  481,
        0,  482,  479,  482,  480,  483,  481,  483,  482,    0,
      481,  870,  483,  482,  480,    0,  481,  483,  871,    0,

      872,  874,  481,  485,  873,    0,  481,  485,  482,  484,
      482,  484,  483,  485,  483,  482,  484,  484,    0,  483,
      482,  484,  486,  485,  483,  489,  486,  489,  874,  489,
      485,  875,  486,    0,  485,  489,  484,    0,  484,  876,
      485,  877,  486,  484,  484,  489,  487,  487,  484,  486,
      485,  487,  489,  486,  489,  878,  489,  487,  875,  486,
      492,  490,  489,  490,  492,  490,  876,  487,  877,  486,
      492,  490,  489,  487,  487,  492,    0,  880,  487,    0,
      492,  490,  878,  881,  487,    0,  882,  492,  490,    0,
      490,  492,  490,  884,  487,  488,  491,  492,  490,  488,

      491,    0,  492,  488,  880,  488,  491,  492,  490,  488,
      881,  885,  491,  882,    0,  886,  491,    0,    0,  488,
      884,  493,  488,  491,  494,  493,  488,  491,  494,  986,
      488,  493,  488,  491,  494,  988,  488,  493,  885,  491,
      990,  493,  886,  491,  494,  495,  488,  991,  493,  495,
        0,  494,  493,  495,  992,  494,  986,    0,  493,  495,
      993,  494,  988,  496,  493,  496,    0,  990,  493,  495,
      496,  494,  495,  995,  991,  496,  495,  497,    0,  497,
      495,  992,    0,  497,  497,  997,  495,  993,    0,  497,
      496,  498,  496,  498,  998,  499,  495,  496,  498,  499,

      995,    0,  496,  498,  497,  499,  497,    0,  999,  500,
      497,  497,  997,  500, 1000,  499,  497,    0,  498,  500,
      498,  998,  499,    0,  501,  498,  499, 1001,  501,  500,
      498,  503,  499,  503,  501,  999,  500,  501,  503,    0,
      500, 1000,  499,  503,  501,    0,  500, 1003, 1005,    0,
      507,  501,  507,    0, 1001,  501,  500,  507,  503,    0,
      503,  501,  507, 1009,  501,  503,  505,  505,  505,    0,
      503,  501,  502,  505, 1003, 1005,  502,  507,  505,  507,
      502, 1011,    0, 1012,  507, 1013,  502, 1020, 1021,  507,
     1009,  502, 1022,  505,  505,  505,  502,    0, 1025,  502,

      505,    0, 1027,  502,  506,  505,    0,  502, 1011,  506,
     1012,  506, 1013,  502, 1020, 1021,  506, 1029,  502, 1022,
      509,  506,  509,  502,  504, 1025, 1031,  509,  509, 1027,
     1032,  506,  509,  504,    0,  504,  506,  504,  506, 1033,
      504,    0,    0,  506, 1029,  504,    0,  509,  506,  509,
      508,  504, 1034, 1031,  509,  509, 1035, 1032, 1037,  509,
      504,  508,  504,  508,  504,  510, 1033,  504,  508,  510,
     1038,  510,  504,  508, 1039, 1040,  510,  508,    0, 1034,
        0,  510,  511, 1035,  511, 1037, 1042,    0,  508,  511,
      508,    0,  510,    0,  511,  508,  510, 1038,  510, 1044,

      508, 1039, 1040,  510, 1046,  512,    0,  512,  510,  511,
      513,  511,  512, 1042,  513,  514,  511,  512,  515,  514,
      513,  511,  515,  516, 1047,  514, 1044,  516,  515, 1048,
      513, 1046,  512,  516,  512,  514,    0,  513,  515,  512,
        0,  513,  514,  516,  512,  515,  514,  513,    0,  515,
      516, 1047,  514,    0,  516,  515, 1048,  513,    0,  517,
      516,    0,  514,  517,  518,  515,    0,  519,  518,  517,
      516,  519,  517,  520,  518,  520, 1049,  519,  519,  517,
      520,  521,  518,  521,  518,  520,  517,  519,  521,  521,
      517,  518,    0,  521,  519,  518,  517,    0,  519,  517,

      520,  518,  520, 1049,  519,  519,  517,  520,  521,  518,
      521,  518,  520, 1050,  519,  521,  521,  522, 1055,  522,
      521,  523, 1056,  523,  522,  522, 1134, 1138,  523,  522,
      524, 1139,  524,  523,  524, 1142,    0,  524,    0,    0,
     1050,    0,  524,    0,  522, 1055,  522, 1143,  523, 1056,
      523,  522,  522, 1134, 1138,  523,  522,  524, 1139,  524,
      523,  524, 1142,  525,  524,  525,  526, 1147,  526,  524,
      525,  525,    0,  526, 1143,  525,  527, 1149,  526,  528,
      527,    0, 1150,  528, 1153,    0,  527,    0,    0,  528,
      525, 1154,  525,  526, 1147,  526,  527,  525,  525,  528,

      526,    0,  525,  527, 1149,  526,  528,  527,  530, 1150,
      528, 1153,  529,  527,  529,  530,  528,  530, 1154,  529,
     1155,    0,  530,  527,  529, 1156,  528,  530,  531,    0,
      533,    0,  531,  532,  533,  530,    0,  532,  531,  529,
      533,  529,  530,  532,  530,  532,  529, 1155,  531,  530,
      533,  529, 1156,  532,  530,  531,  535,  533,  535,  531,
      532,  533, 1159,  535,  532,  531,    0,  533,  535,    0,
      532,    0,  532, 1160,  534,  531,    0,  533,  534, 1163,
      532, 1165,  534,  535,  536,  535,  536,    0,  534, 1159,
      535,  536,    0,  536, 1166,  535,  536,    0,  534,    0,

     1160,  534, 1167,  537, 1168,  534, 1163, 1169, 1165,  534,
        0,  536,  537,  536,  537,  534, 1216, 1219,  536,  537,
      536, 1166, 1222,  536,  537,  534,  538, 1223,  538, 1167,
      537, 1168, 1226,  538, 1169,    0,    0,  538,  538,  537,
      539,  537,  539, 1216, 1219,    0,  537,  539,  539, 1222,
        0,  537,  539,  538, 1223,  538,  540, 1227,  540, 1226,
      538, 1228,  540,  540,  538,  538,  541,  539,  540,  539,
      541, 1232,  541,    0,  539,  539, 1233,  541,    0,  539,
        0,    0,  541,  540, 1227,  540, 1217, 1217, 1228,  540,
      540, 1234, 1236,  541,  542,  540,  542,  541, 1232,  541,

      542,  542, 1261, 1233,  541,  669,  542,  669,  670,  541,
      670,  669,  669, 1262,  670,  670, 1265,  669, 1234, 1236,
      670,  542,    0,  542, 1217,    0,  671,  542,  542, 1261,
      671,    0,  669,  542,  669,  670,  671,  670,  669,  669,
     1262,  670,  670, 1265,  669,  672,  671,  670,  673,  672,
      675, 1217,  673,  671,  675,  672, 1270,  671,  673, 1274,
      675,  673,  674,  671,  674,  672, 1286, 1286,  673,  674,
      675,    0,  672,  671,  674,  673,  672,  675,    0,  673,
        0,  675,  672, 1270,    0,  673, 1274,  675,  673,  674,
     1287,  674,  672, 1290,    0,  673,  674,  675,  676,  677,

      676,  674,  678,  677,    0,  676,  678,  679, 1286,  677,
      676,  679,  678,    0,    0,  679, 1293, 1287,    0,  677,
     1290,  679,  678,    0,    0,  676,  677,  676,    0,  678,
      677,  679,  676,  678,  679, 1286,  677,  676,  679,  678,
      680,  681,  679, 1293,  680,  681,  677, 1298,  679,  678,
      680,  681,    0, 1302,    0,  682, 1306, 1308,  679,  682,
      680,  681,    0,  682, 1239, 1239,    0,  680,  681,  682,
        0,  680,  681, 1310, 1298,    0,    0,  680,  681,  682,
     1302,  683,  682, 1306, 1308,  683,  682,  680,  681,  683,
      682,  683, 1312,  684,  685,  686,  682,  684,  685,  686,

     1310,  683, 1239,  684,  685,  686,  682,  685,  683, 1314,
        0,    0,  683,  684,  685,  686,  683,    0,  683, 1312,
      684,  685,  686,  687,  684,  685,  686,  687,  683, 1239,
      684,  685,  686,  687,  685, 1316, 1314,  688,  687,  688,
      684,  685,  686,  687,  688, 1318,    0,  689,  690,  688,
      687,  689,  690,    0,  687,    0,    0,  689,  690, 1320,
      687, 1322, 1316,  690,  688,  687,  688,  689,  690,    0,
      687,  688, 1318,  691,  689,  690,  688,  691,  689,  690,
      692,    0,  692,  691,  689,  690, 1320,  692, 1322, 1324,
      690,    0,  692,  691,  689,  690,  693,  693,  693,    0,

      691, 1292, 1292,  693,  691,    0,    0,  692,  693,  692,
      691,    0,    0,    0,  692,    0, 1324,    0,    0,  692,
      691,    0,    0,  693,  693,  693,    0,  694,    0,  694,
      693,    0,    0,    0,  694,  693,  694,    0,  695,  694,
      695,    0,    0, 1292,    0,  695,  695,    0,    0,    0,
      695,  696,    0,    0,  694,    0,  694,    0,    0,    0,
        0,  694,  696,  694,  696,  695,  694,  695,    0,  696,
     1292,    0,  695,  695,  696,    0,    0,  695,  696,  698,
      697,    0,  697,    0,    0,    0,  697,  697,  698,  696,
      698,  696,  697,    0,    0,  698,  696,    0,  699,    0,

      698,  696,  699,    0,    0,    0,  698,  697,  699,  697,
        0,    0,    0,  697,  697,  698,    0,  698,  699,  697,
        0,  700,  698,  700,  701,  699,  701,  698,  700,  699,
      702,  701,  702,  700,  709,  699,  701,  702,  709,    0,
        0,    0,  702,    0,  709,  699,    0,    0,  700,    0,
      700,  701,    0,  701,  709,  700,    0,  702,  701,  702,
      700,  709,    0,  701,  702,  709,  703,    0,  703,  702,
      703,  709,  704,  703,  704,    0,  704,    0,  703,  704,
      705,  709,  705,    0,  704,    0,    0,  705,    0,  705,
        0,    0,  705,  703,    0,  703,    0,  703,    0,  704,

      703,  704,  707,  704,    0,  703,  704,  705,    0,  705,
      706,  704,  706,  707,  705,  707,  705,  706,  706,  705,
      707,    0,  706,  708,    0,  707,    0,    0,  710,  707,
        0,    0,  710,    0,  708,    0,  708,  706,  710,  706,
      707,  708,  707,    0,  706,  706,  708,  707,  710,  706,
      708,    0,  707,    0,  711,  710,  712,    0,  711,  710,
      712,  708,    0,  708,  711,  710,  712,    0,  708,  711,
        0,    0,    0,  708,  711,  710,  712,    0,  713,    0,
      714,  711,  713,  712,  714,  711,  713,  712,    0,    0,
      714,  711,  713,  712,  715,    0,  711,    0,  715,    0,

      714,  711,  713,  712,  715,  713,    0,  714,  716,  713,
        0,  714,  716,  713,  715,    0,  716,  714,    0,  713,
        0,  715,  716,    0,  718,  715,  717,  714,  718,  713,
      717,  715,  716,    0,  718,  716,  717,  717,  719,  716,
      719,  715,    0,  716,  718,  719,  717,    0,    0,  716,
      719,  718,    0,  717,    0,  718,    0,  717,    0,  716,
        0,  718,    0,  717,  717,  719,    0,  719,  720,    0,
      720,  718,  719,  717,  721,  720,  721,  719,  722,  723,
      720,  721,  722,  723,    0,    0,  721,    0,  722,  723,
        0,    0,  723,    0,    0,  720,    0,  720,  722,  723,

        0,  721,  720,  721,    0,  722,  723,  720,  721,  722,
      723,    0,    0,  721,    0,  722,  723,    0,    0,  723,
      724,    0,  724,    0,    0,  722,  723,  724,  725,    0,
      725,  726,  724,  726,  725,  725,    0,  726,  726,    0,
      725,    0,    0,  726,    0,    0,    0,  724,    0,  724,
        0,    0,    0,    0,  724,  725,    0,  725,  726,  724,
      726,  725,  725,    0,  726,  726,    0,  725,    0,    0,
      726,  727,  728,  729,  728,  729,  727,    0,  727,  728,
      729,    0,  727,  727,  728,  729,    0,    0,  727,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  727,  728,

      729,  728,  729,  727,    0,  727,  728,  729,    0,  727,
      727,  728,  729,    0,  730,  727,  730,  731,  732,  731,
      732,  730,    0,    0,  731,  732,  730,    0,    0,  731,
      732,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  730,    0,  730,  731,  732,  731,  732,  730,    0,
        0,  731,  732,  730,    0,    0,  731,  732,  733,    0,
      733,  734,  735,  734,  735,  733,  733,    0,  734,  735,
      733,    0,    0,  734,  735,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  733,    0,  733,  734,  735,
      734,  735,  733,  733,  736,  734,  735,  733,  736,  737,

      734,  735,  738,  737,  736,    0,  738,  740,  739,  737,
      739,  740,  738,  740,  736,  739,  739,    0,  740,  737,
      739,  736,  738,  740,    0,  736,  737,    0,    0,  738,
      737,  736,    0,  738,  740,  739,  737,  739,  740,  738,
      740,  736,  739,  739,  742,  740,  737,  739,  742,  738,
      740,  741,  743,  741,  742,    0,  743,  741,  741,    0,
        0,    0,  743,  741,  742,    0,    0,    0,    0,    0,
        0,  742,  743,    0,    0,  742,    0,    0,  741,  743,
      741,  742,    0,  743,  741,  741,  744,    0,  744,  743,
      741,  742,  744,    0,    0,    0,  745,  746,  744,  743,

      745,  746,    0,    0,    0,    0,  745,  746,  744,    0,
      746,    0,    0,  744,    0,  744,  745,  746,    0,  744,
        0,    0,    0,  745,  746,  744,  747,  745,  746,    0,
      747,    0,    0,  745,  746,  744,  747,  746,  748,  747,
        0,  749,  748,  745,  746,  749,  747,    0,  748,  749,
      750,  749,    0,  747,  750,    0,    0,  747,  748,    0,
      750,  749,    0,  747,    0,  748,  747,    0,  749,  748,
      750,    0,  749,  747,    0,  748,  749,  750,  749,  751,
      752,  750,    0,  751,  752,  748,    0,  750,  749,  751,
      752,    0,    0,    0,  753,    0,    0,  750,  753,  751,

      752,    0,  753,    0,    0,    0,  751,  752,  753,    0,
      751,  752,    0,    0,    0,    0,  751,  752,  753,    0,
      754,  753,    0,    0,  754,  753,  751,  752,  754,  753,
        0,    0,  755,  756,  754,  753,  755,  756,    0,    0,
        0,    0,  755,  756,  754,  753,  757,  754,    0,    0,
      757,  754,  755,  756,  757,  754,  757,    0,    0,  755,
      756,  754,    0,  755,  756,    0,  757,    0,    0,  755,
      756,  754,  758,  757,  759,    0,  758,  757,  759,  755,
      756,  757,  758,  757,  759,  758,  761,    0,    0,  759,
      761,    0,  758,  757,  759,  760,  761,    0,  760,  758,

        0,  759,  760,  758,    0,  759,  761,    0,  760,  758,
        0,  759,  758,  761,    0,    0,  759,  761,  760,  758,
      762,  759,  760,  761,  762,  760,    0,  764,  762,  760,
      762,    0,  763,  761,  763,  760,  764,    0,  764,  763,
      762,    0,  765,  764,  763,  760,  765,  762,  764,    0,
        0,  762,  765,    0,  764,  762,    0,  762,    0,  763,
        0,  763,  765,  764,  766,  764,  763,  762,  766,  765,
      764,  763,  767,  765,  766,  764,  767,  769,  768,  765,
      768,  769,  767,    0,  766,  768,    0,  769,    0,  765,
      768,  766,  767,    0,    0,  766,  770,  769,    0,  767,

      770,  766,    0,  767,  769,  768,  770,  768,  769,  767,
        0,  766,  768,    0,  769,    0,  770,  768,  771,  767,
        0,  772,  771,  770,  769,  772,  773,  770,  771,    0,
      773,  772,    0,  770,    0,  775,  773,  775,  771,    0,
      774,  772,  775,  770,  774,  771,  773,  775,  772,  771,
      774,    0,  772,  773,  776,  771,  776,  773,  772,    0,
      774,  776,  775,  773,  775,  771,  776,  774,  772,  775,
        0,  774,    0,  773,  775,  778,    0,  774,  777,    0,
      777,  776,    0,  776,  778,  777,  778,  774,  776,    0,
      777,  778,  779,  776,  779,    0,  778,    0,    0,  779,

        0,  779,  778,    0,  779,  777,    0,  777,  780,    0,
      780,  778,  777,  778,    0,  780,    0,  777,  778,  779,
      780,  779,    0,  778,    0,    0,  779,  781,  779,  781,
      782,  779,    0,    0,  781,  780,  781,  780,  783,  781,
      783,  782,  780,  782,    0,  783,  783,  780,  782,    0,
      783,    0,    0,  782,  781,    0,  781,  782,    0,    0,
        0,  781,    0,  781,  784,  783,  781,  783,  782,  784,
      782,  784,  783,  783,  785,  782,  784,  783,  785,  786,
      782,  784,  786,  786,  785,    0,    0,    0,    0,  786,
        0,  784,    0,    0,  785,    0,  784,    0,  784,  786,

        0,  785,    0,  784,    0,  785,  786,    0,  784,  786,
      786,  785,    0,  787,  788,  789,  786,  787,  788,  789,
        0,  785,    0,  787,  788,  789,  786,  790,  791,    0,
      788,  790,  791,  787,  788,  789,    0,  790,  791,    0,
      787,  788,  789,    0,  787,  788,  789,  790,  791,    0,
      787,  788,  789,    0,  790,  791,    0,  788,  790,  791,
      787,  788,  789,    0,  790,  791,  792,    0,  792,  890,
      891,  890,  891,  792,  790,  791,  890,  891,  792,    0,
        0,  890,  891,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  792,    0,  792,  890,  891,  890,  891,

      792,    0,    0,  890,  891,  792,    0,    0,  890,  891,
      892,  893,  892,  893,    0,  894,  895,  892,  893,  894,
      895,    0,  892,  893,  892,  894,  895,    0,    0,    0,
        0,    0,    0,    0,    0,  894,  895,  892,  893,  892,
      893,    0,  894,  895,  892,  893,  894,  895,    0,  892,
      893,  892,  894,  895,  896,  897,    0,    0,  896,  897,
        0,    0,  894,  895,  896,  897,    0,  899,  899,  898,
      897,    0,  899,  898,  896,  897,    0,  898,  899,    0,
        0,  896,  897,  898,    0,  896,  897,    0,  899,    0,
        0,  896,  897,  898,  899,  899,  898,  897,    0,  899,

      898,  896,  897,    0,  898,  899,  900,  901,  900,  901,
      898,    0,  900,    0,  901,  899,    0,    0,  900,  901,
      898,    0,    0,    0,    0,    0,    0,    0,  900,    0,
      902,    0,  902,  900,  901,  900,  901,  902,  902,  900,
      903,  901,  902,  904,  903,  900,  901,  904,  905,  906,
      903,  906,  905,  904,    0,  900,  906,  902,  905,  902,
      903,  906,  907,  904,  902,  902,  907,  903,  905,  902,
      904,  903,  907,    0,  904,  905,  906,  903,  906,  905,
      904,    0,  907,  906,    0,  905,    0,  903,  906,  907,
      904,    0,  908,  907,    0,  905,  908,  909,    0,  907,

      911,  909,  908,    0,  911,  909,  910,    0,  910,  907,
      911,  909,  908,  910,    0,    0,    0,    0,  910,  908,
      911,  909,    0,  908,  909,    0,  912,  911,  909,  908,
      912,  911,  909,  910,    0,  910,  912,  911,  909,  908,
      910,    0,    0,    0,    0,  910,  912,  911,  909,    0,
      913,  914,    0,  912,  913,  914,    0,  912,    0,    0,
      913,  914,  915,  912,  915,    0,  914,    0,    0,  915,
      913,  914,    0,  912,  915,  916,    0,  913,  914,  916,
      917,  913,  914,    0,  917,  916,    0,  913,  914,  915,
      917,  915,    0,  914,    0,  916,  915,  913,  914,  918,

      917,  915,  916,  918,    0,    0,  916,  917,  920,  918,
      920,  917,  916,    0,  918,  920,    0,  917,    0,  918,
      920,    0,  916,    0,  919,    0,  918,  917,  919,    0,
      918,    0,    0,    0,  919,  920,  918,  920,    0,  919,
        0,  918,  920,    0,  919,    0,  918,  920,  921,    0,
        0,  919,  921,  923,    0,  919,    0,  923,  921,    0,
        0,  919,  927,  923,  927,    0,  919,    0,  921,  927,
      922,  919,  922,  923,  927,  921,  922,    0,    0,  921,
      923,    0,  922,    0,  923,  921,    0,    0,    0,  927,
      923,  927,  922,    0,  924,  921,  927,  922,  924,  922,

      923,  927,  925,  922,  924,    0,  925,    0,    0,  922,
        0,    0,  925,    0,  924,    0,    0,    0,    0,  922,
      925,  924,  925,    0,    0,  924,    0,    0,  926,  925,
        0,  924,  926,  925,    0,    0,    0,    0,  926,  925,
        0,  924,    0,  926,  928,  929,  928,  925,  926,  925,
      929,  928,  929,    0,    0,  926,  928,  929,    0,  926,
        0,    0,  929,    0,    0,  926,    0,    0,    0,    0,
      926,  928,  929,  928,  930,  926,  930,  929,  928,  929,
      931,  930,  931,  928,  929,    0,  930,  931,  932,  929,
      932,    0,  931,    0,    0,  932,  932,    0,    0,    0,

      932,  930,    0,  930,  933,    0,  933,  931,  930,  931,
        0,  933,    0,  930,  931,  932,  933,  932,  934,  931,
      934,    0,  932,  932,    0,  934,    0,  932,    0,    0,
      934,  933,  935,  933,  935,    0,    0,    0,  933,  935,
      935,    0,    0,  933,  935,  934,  937,  934,  937,    0,
      936,    0,  934,  937,  936,    0,  937,  934,  937,  935,
      936,  935,  938,    0,  938,    0,  935,  935,    0,  938,
      936,  935,    0,  937,  938,  937,    0,  936,    0,    0,
      937,  936,    0,  937,    0,  937,  939,  936,  939,  938,
        0,  938,  940,  939,  940,    0,  938,  936,  939,  940,

        0,  938,  941,    0,  940,    0,    0,    0,    0,    0,
      941,    0,  941,  939,    0,  939,  942,  941,  942,  940,
      939,  940,  941,  942,    0,  939,  940,    0,  942,  941,
        0,  940,    0,    0,  943,    0,  943,  941,  944,  941,
        0,  943,  944,  942,  941,  942,  943,    0,  944,  941,
      942,    0,  945,    0,  945,  942,    0,    0,  944,  945,
        0,  943,    0,  943,  945,  944,    0,    0,  943,  944,
        0,  946,    0,  943,    0,  944,    0,    0,    0,  945,
        0,  945,  946,    0,  946,  944,  945,    0,  947,  946,
      947,  945,    0,    0,  946,  947,  947,  948,  946,    0,

      947,  948,    0,  948,    0,    0,    0,    0,  948,  946,
        0,  946,    0,  948,    0,  947,  946,  947,    0,    0,
        0,  946,  947,  947,  948,    0,    0,  947,  948,  949,
      948,  949,  950,    0,  950,  948,  949,  949,    0,  950,
      948,  949,  952,  951,  950,  951,  952,    0,    0,    0,
      951,    0,  952,    0,    0,  951,  949,    0,  949,  950,
        0,  950,  952,  949,  949,    0,  950,    0,  949,  952,
      951,  950,  951,  952,    0,    0,  953,  951,    0,  952,
      953,    0,  951,  954,  954,    0,  953,    0,  954,  952,
        0,  953,    0,    0,  954,    0,  953,    0,    0,    0,

        0,    0,    0,  953,  954,    0,    0,  953,    0,    0,
      954,  954,  955,  953,    0,  954,  955,    0,  953,    0,
      956,  954,  955,  953,  956,  955,    0,    0,    0,    0,
      956,  954,  955,  956,  957,    0,    0,    0,  957,  955,
      956,    0,    0,  955,  957,    0,  958,  956,    0,  955,
      958,  956,  955,    0,  957,    0,  958,  956,  959,  955,
      956,  957,  959,    0,    0,  957,  958,  956,  959,    0,
      960,  957,    0,  958,  960,    0,    0,  958,  959,    0,
      960,  957,    0,  958,  961,  959,    0,    0,  961,  959,
      960,    0,  961,  958,    0,  959,  962,  960,  961,    0,

      962,  960,  965,    0,  962,  959,  965,  960,  961,    0,
      962,  961,  965,  963,  963,  961,    0,  960,  963,  961,
      962,    0,  965,  962,  963,  961,  966,  962,  964,  965,
      966,  962,  964,  965,  963,  961,  966,  962,  964,  965,
      963,  963,    0,  964,    0,  963,  966,  962,  964,  965,
        0,  963,    0,  966,  968,  964,    0,  966,  968,  964,
        0,  963,  968,  966,    0,  964,  967,  967,  968,    0,
      964,  967,  969,  966,  969,  964,    0,  967,  968,  969,
        0,  968,    0,    0,  969,  968,    0,  967,    0,  968,
      970,    0,  970,  967,  967,  968,  970,  970,  967,  969,

        0,  969,  970,    0,  967,  968,  969,    0,  971,    0,
      971,  969,    0,    0,  967,  971,  971,  970,    0,  970,
      971,  972,    0,  970,  970,    0,    0,  973,    0,  970,
        0,    0,  972,    0,  972,  971,    0,  971,  973,  972,
      973,    0,  971,  971,  972,  973,    0,  971,  972,    0,
      973,  974,    0,  974,  973,    0,    0,    0,  974,  972,
        0,  972,  975,  974,  975,  973,  972,  973,    0,  975,
        0,  972,  973,    0,  975,    0,    0,  973,  974,    0,
      974,    0,  976,  977,  977,  974,  976,    0,  977,  975,
      974,  975,  976,    0,  977,    0,  975,    0,    0,    0,

        0,  975,  976,    0,  977,    0,    0,    0,  978,  976,
      977,  977,  978,  976,    0,  977,  979,    0,  978,  976,
      979,  977,    0,    0,    0,  980,  979,  980,  978,  976,
        0,  977,  980,  981,    0,  978,  979,  980,    0,  978,
        0,    0,    0,  979,  981,  978,  981,  979,    0,    0,
        0,  981,  980,  979,  980,  978,  981,  982,    0,  980,
      981,    0,    0,  979,  980,  983,    0,  983,  982,    0,
      982,  981,  983,  981,  984,  982,  984,  983,  981,    0,
      982,  984,    0,  981,  982,    0,  984,    0,    0,    0,
        0,    0,  983,    0,  983,  982, 1058,  982,    0,  983,

     1058,  984,  982,  984,  983, 1059, 1058,  982,  984, 1059,
     1060,    0, 1060,  984, 1063, 1059, 1058, 1060, 1063, 1061,
        0, 1061, 1060, 1058, 1063, 1059, 1061, 1058, 1062,    0,
     1062, 1061, 1059, 1058, 1063, 1062, 1059, 1060,    0, 1060,
     1062, 1063, 1059, 1058, 1060, 1063, 1061,    0, 1061, 1060,
     1064, 1063, 1059, 1061, 1064, 1062,    0, 1062, 1061,    0,
     1064, 1063, 1062,    0, 1065, 1064, 1065, 1062,    0,    0,
     1064, 1065, 1066, 1067, 1066, 1067, 1065, 1064,    0, 1066,
     1067, 1064,    0,    0, 1066, 1067,    0, 1064,    0,    0,
        0, 1065, 1064, 1065,    0,    0,    0, 1064, 1065, 1066,

     1067, 1066, 1067, 1065,    0,    0, 1066, 1067, 1068,    0,
     1068, 1066, 1067,    0, 1069, 1068, 1069, 1070, 1070, 1070,
     1068, 1069, 1069,    0, 1070,    0, 1069,    0,    0, 1070,
        0,    0,    0,    0,    0, 1068,    0, 1068,    0,    0,
        0, 1069, 1068, 1069, 1070, 1070, 1070, 1068, 1069, 1069,
     1071, 1070,    0, 1069,    0, 1072, 1070, 1072,    0, 1071,
        0, 1071, 1072,    0,    0,    0, 1071, 1072, 1073,    0,
     1073, 1071,    0,    0,    0, 1073, 1073, 1071,    0,    0,
     1073,    0, 1072,    0, 1072,    0, 1071,    0, 1071, 1072,
        0,    0,    0, 1071, 1072, 1073,    0, 1073, 1071, 1074,

     1075, 1074, 1073, 1073,    0,    0, 1074, 1073,    0,    0,
     1075, 1074, 1075, 1076,    0, 1076,    0, 1075,    0,    0,
     1076,    0, 1075,    0,    0, 1076, 1074, 1075, 1074,    0,
        0,    0, 1077, 1074,    0,    0,    0, 1075, 1074, 1075,
     1076, 1077, 1076, 1077, 1075,    0,    0, 1076, 1077, 1075,
        0,    0, 1076, 1077, 1078, 1079, 1078, 1079,    0, 1077,
        0, 1078, 1079,    0,    0,    0, 1078, 1079, 1077,    0,
     1077,    0,    0,    0,    0, 1077,    0,    0,    0,    0,
     1077, 1078, 1079, 1078, 1079, 1080, 1081, 1080, 1078, 1079,
     1081, 1082, 1080, 1078, 1079, 1082, 1081, 1080, 1083,    0,

     1083, 1082,    0,    0,    0, 1083, 1081,    0,    0,    0,
     1083, 1082, 1080, 1081, 1080,    0,    0, 1081, 1082, 1080,
        0,    0, 1082, 1081, 1080, 1083,    0, 1083, 1082,    0,
        0,    0, 1083, 1081, 1084, 1085, 1084, 1083, 1082, 1085,
     1086, 1084, 1084,    0, 1086, 1085, 1084,    0,    0,    0,
     1086,    0,    0,    0, 1087, 1085,    0,    0, 1087,    0,
     1086, 1084, 1085, 1084, 1087,    0, 1085, 1086, 1084, 1084,
        0, 1086, 1085, 1084, 1087,    0, 1088, 1086,    0, 1089,
     1088, 1087, 1085, 1089, 1090, 1087, 1088, 1086, 1090, 1089,
        0, 1087,    0,    0, 1090,    0, 1088,    0, 1091, 1089,

        0, 1087, 1091, 1088, 1090,    0, 1089, 1088, 1091,    0,
     1089, 1090,    0, 1088,    0, 1090, 1089,    0, 1091,    0,
     1092, 1090,    0, 1088, 1092, 1091, 1089,    0, 1093, 1091,
     1092, 1090, 1093, 1092,    0, 1091,    0,    0, 1093,    0,
     1092,    0, 1094,    0,    0, 1091, 1094, 1092, 1093,    0,
     1094, 1092,    0,    0, 1095, 1093, 1094, 1092, 1095, 1093,
     1092,    0,    0,    0, 1095, 1093, 1094, 1092, 1096, 1094,
        0,    0, 1096, 1094, 1095, 1093,    0, 1094, 1096,    0,
     1097, 1095, 1097, 1094,    0, 1095,    0, 1097, 1096,    0,
        0, 1095, 1097, 1094,    0, 1096, 1098,    0, 1098, 1096,

        0, 1095,    0, 1098, 1099, 1096, 1099, 1097, 1098, 1097,
     1100, 1099, 1100,    0, 1097, 1096, 1099, 1100,    0, 1097,
        0,    0, 1100, 1098,    0, 1098,    0,    0,    0, 1101,
     1098, 1099,    0, 1099, 1102, 1098, 1102, 1100, 1099, 1100,
     1101, 1102, 1101, 1099, 1100,    0, 1102, 1101,    0, 1100,
        0,    0, 1101,    0,    0,    0, 1101,    0, 1103,    0,
     1103, 1102,    0, 1102,    0, 1103, 1103, 1101, 1102, 1101,
     1103, 1104,    0, 1102, 1101, 1104, 1105,    0,    0, 1101,
     1105, 1104,    0,    0, 1106, 1103, 1105, 1103, 1106,    0,
        0, 1104, 1103, 1103, 1106,    0, 1105, 1103, 1104,    0,

        0,    0, 1104, 1105, 1106,    0, 1107, 1105, 1104,    0,
     1107, 1106,    0, 1105,    0, 1106, 1107,    0, 1104,    0,
     1108, 1106,    0, 1105, 1108,    0, 1107,    0,    0,    0,
     1108, 1106, 1109, 1107, 1109,    0,    0, 1107, 1109,    0,
     1108,    0,    0, 1107, 1109,    0, 1110, 1108, 1110,    0,
        0, 1108, 1110, 1107, 1109,    0,    0, 1108, 1110, 1109,
        0, 1109, 1111,    0, 1111, 1109,    0, 1108, 1110, 1111,
     1112, 1109, 1112, 1110, 1111, 1110, 1113, 1112, 1113, 1110,
        0, 1109, 1112, 1113,    0, 1110,    0,    0, 1113, 1111,
        0, 1111,    0,    0,    0, 1110, 1111, 1112,    0, 1112,

     1114, 1111, 1114, 1113, 1112, 1113, 1115, 1114, 1115, 1112,
     1113,    0, 1114, 1115, 1116, 1113, 1116,    0, 1115,    0,
        0, 1116,    0,    0,    0,    0, 1116, 1114,    0, 1114,
     1117,    0, 1117, 1115, 1114, 1115,    0, 1117, 1118, 1114,
     1115, 1116, 1117, 1116,    0, 1115,    0,    0, 1116, 1118,
     1177, 1118,    0, 1116, 1177,    0, 1118, 1117,    0, 1117,
     1177, 1118, 1119, 1120, 1117, 1118,    0,    0,    0, 1117,
     1177,    0, 1120, 1119, 1120, 1119, 1118, 1177, 1118, 1120,
     1119, 1177,    0, 1118, 1120, 1119,    0, 1177, 1118, 1119,
     1120,    0,    0,    0,    0,    0, 1121, 1177, 1121, 1120,

     1119, 1120, 1119, 1121, 1121,    0, 1120, 1119, 1121, 1122,
        0, 1120, 1119,    0, 1123,    0, 1123, 1122,    0, 1122,
     1124, 1123, 1124, 1121, 1122, 1121, 1123, 1124,    0, 1122,
     1121, 1121, 1124,    0,    0, 1121, 1122,    0, 1125,    0,
     1125, 1123,    0, 1123, 1122, 1125, 1122, 1124, 1123, 1124,
     1125, 1122,    0, 1123, 1124,    0, 1122,    0,    0, 1124,
        0, 1126,    0, 1126, 1127, 1125, 1127, 1125, 1126,    0,
     1127, 1127, 1125, 1126,    0,    0, 1127, 1125,    0,    0,
     1128,    0, 1128,    0,    0,    0,    0, 1128, 1126,    0,
     1126, 1127, 1128, 1127, 1173, 1126, 1173, 1127, 1127,    0,

     1126, 1173,    0, 1127,    0,    0, 1173, 1128, 1174, 1128,
     1174,    0,    0,    0, 1128, 1174,    0,    0,    0, 1128,
     1174, 1173, 1175, 1173, 1175,    0,    0,    0, 1173, 1175,
        0,    0,    0, 1173, 1175, 1174, 1176, 1174, 1176,    0,
     1178,    0, 1174, 1176, 1178,    0,    0, 1174, 1176, 1175,
     1178, 1175,    0,    0, 1179,    0, 1175,    0, 1179,    0,
     1178, 1175,    0, 1176, 1179, 1176,    0, 1178, 1180, 1180,
     1176, 1178,    0,    0, 1179, 1176,    0, 1178, 1181,    0,
        0, 1179, 1181,    0,    0, 1179,    0, 1178, 1181,    0,
        0, 1179, 1182, 1180,    0,    0, 1182, 1180, 1181,    0,

     1182, 1179,    0, 1180,    0, 1181, 1182,    0, 1183, 1181,
        0,    0, 1183, 1180,    0, 1181, 1182,    0, 1183, 1182,
     1180,    0, 1184, 1182, 1180, 1181, 1184, 1182, 1183,    0,
     1180,    0, 1184, 1182, 1185, 1183,    0, 1186, 1185, 1183,
     1180, 1186, 1184, 1182, 1185, 1183, 1187, 1186,    0, 1184,
     1187,    0, 1186, 1184, 1185, 1183, 1187, 1186,    0, 1184,
        0, 1185,    0,    0, 1186, 1185, 1187,    0, 1186, 1184,
        0, 1185, 1188, 1187, 1186,    0, 1188, 1187,    0, 1186,
        0, 1185, 1188, 1187, 1186, 1189,    0,    0,    0, 1189,
        0,    0, 1188, 1187, 1190, 1189, 1190,    0,    0, 1188,

        0, 1190,    0, 1188,    0, 1189, 1190,    0, 1191, 1188,
     1191,    0, 1189,    0,    0, 1191, 1189,    0, 1192, 1188,
     1191, 1190, 1189, 1190, 1193,    0, 1193, 1192, 1190, 1192,
        0, 1193, 1189, 1190, 1192, 1191, 1193, 1191,    0, 1192,
        0,    0, 1191,    0,    0, 1192,    0, 1191, 1194,    0,
     1194, 1193,    0, 1193, 1192, 1194, 1192, 1195, 1193, 1195,
     1194, 1192,    0, 1193, 1195,    0, 1192,    0,    0, 1195,
        0,    0,    0,    0,    0, 1194,    0, 1194,    0,    0,
        0,    0, 1194, 1196, 1195, 1196, 1195, 1194, 1197, 1196,
     1196, 1195, 1197, 1198,    0, 1196, 1195, 1198, 1197, 1199,

        0, 1199, 1200, 1198, 1200,    0, 1199,    0, 1197, 1200,
     1196, 1199, 1196, 1198, 1200, 1197, 1196, 1196,    0, 1197,
     1198,    0, 1196,    0, 1198, 1197, 1199,    0, 1199, 1200,
     1198, 1200, 1201, 1199, 1201, 1197, 1200,    0, 1199, 1201,
     1198, 1200,    0, 1202, 1201, 1202,    0,    0,    0,    0,
     1202, 1202,    0,    0,    0, 1202, 1204,    0, 1204, 1201,
        0, 1201,    0, 1204,    0,    0, 1201,    0, 1204,    0,
     1202, 1201, 1202, 1203, 1203,    0, 1203, 1202, 1202,    0,
        0, 1203, 1202, 1204,    0, 1204, 1203, 1205,    0, 1205,
     1204,    0,    0,    0, 1205, 1204,    0,    0,    0, 1205,

     1203, 1203,    0, 1203,    0,    0,    0,    0, 1203,    0,
     1206,    0, 1206, 1203, 1205,    0, 1205, 1206, 1206,    0,
        0, 1205, 1206, 1207,    0, 1207, 1205,    0,    0,    0,
     1207, 1209, 1209, 1209, 1208, 1207, 1208, 1206, 1209, 1206,
     1208, 1208,    0, 1209, 1206, 1206, 1208,    0,    0, 1206,
     1207,    0, 1207,    0,    0,    0,    0, 1207, 1209, 1209,
     1209, 1208, 1207, 1208, 1210, 1209, 1210, 1208, 1208,    0,
     1209, 1210, 1210, 1208, 1211, 1212, 1210, 1213, 1211, 1212,
        0, 1213,    0,    0, 1211, 1212,    0, 1213,    0,    0,
        0, 1210,    0, 1210, 1211, 1212,    0, 1213, 1210, 1210,

        0, 1211, 1212, 1210, 1213, 1211, 1212,    0, 1213, 1214,
        0, 1211, 1212, 1214, 1213,    0,    0,    0,    0, 1214,
        0, 1211, 1212, 1240, 1213,    0,    0, 1240, 1238, 1214,
        0,    0, 1238, 1240,    0,    0, 1214,    0, 1238,    0,
     1214, 1238,    0, 1240,    0,    0, 1214, 1241, 1238,    0,
     1240, 1241,    0,    0, 1240, 1238, 1214, 1241,    0, 1238,
     1240,    0, 1241,    0,    0, 1238,    0, 1241, 1238,    0,
     1240,    0, 1242, 1243, 1241, 1238, 1242, 1243, 1241,    0,
        0,    0, 1242, 1243, 1241,    0, 1244, 1245, 1244, 1241,
     1244, 1245, 1242, 1243, 1241,    0, 1244, 1245,    0, 1242,

     1243, 1246, 1245, 1242, 1243, 1246, 1244, 1245,    0, 1242,
     1243, 1246,    0, 1244, 1245, 1244,    0, 1244, 1245, 1242,
     1243, 1246,    0, 1244, 1245,    0, 1247, 1248, 1246, 1245,
     1247, 1248, 1246, 1244, 1245,    0, 1247, 1248, 1246,    0,
     1248,    0,    0, 1249, 1250, 1249, 1247, 1248, 1246, 1250,
     1249, 1250,    0, 1247, 1248, 1249, 1250, 1247, 1248,    0,
        0, 1250,    0, 1247, 1248,    0,    0, 1248,    0,    0,
     1249, 1250, 1249, 1247, 1248,    0, 1250, 1249, 1250, 1251,
        0, 1251, 1249, 1250,    0, 1252, 1251, 1252, 1250,    0,
        0, 1251, 1252, 1253,    0, 1253,    0, 1252,    0,    0,

     1253,    0,    0,    0,    0, 1253, 1251,    0, 1251,    0,
        0, 1254, 1252, 1251, 1252, 1254,    0,    0, 1251, 1252,
     1253, 1254, 1253,    0, 1252, 1255,    0, 1253,    0, 1255,
     1256, 1254, 1253, 1257, 1256, 1255, 1255, 1257, 1254,    0,
     1256,    0, 1254, 1257,    0, 1255,    0,    0, 1254,    0,
     1256,    0, 1255, 1257, 1258, 1258, 1255, 1256, 1254, 1258,
     1257, 1256, 1255, 1255, 1257, 1258,    0, 1256, 1273, 1273,
     1257,    0, 1255,    0, 1275, 1258,    0, 1256, 1275, 1276,
     1257, 1258, 1258, 1276, 1275,    0, 1258,    0, 1278, 1276,
     1278,    0, 1258, 1273, 1275, 1278,    0, 1273,    0, 1276,

     1278, 1275, 1258, 1273,    0, 1275, 1276, 1279, 1277, 1279,
     1276, 1275, 1277, 1273, 1279, 1278, 1276, 1278, 1277, 1279,
     1273, 1275, 1278,    0, 1273,    0, 1276, 1278, 1277,    0,
     1273, 1280,    0, 1280, 1279, 1277, 1279,    0, 1280, 1277,
     1273, 1279, 1281, 1280, 1281, 1277, 1279,    0,    0, 1281,
     1282,    0, 1282,    0, 1281, 1277,    0, 1282, 1280,    0,
     1280,    0, 1282, 1283,    0, 1280,    0, 1283, 1284, 1281,
     1280, 1281, 1284, 1283,    0,    0, 1281, 1282, 1284, 1282,
        0, 1281, 1294, 1283, 1282,    0, 1294, 1295, 1284, 1282,
     1283, 1295, 1294,    0, 1283, 1284, 1296, 1295, 1296, 1284,

     1283,    0, 1294, 1296, 1304, 1284, 1304, 1295, 1296, 1294,
     1283, 1304,    0, 1294, 1295, 1284, 1304,    0, 1295, 1294,
        0,    0,    0, 1296, 1295, 1296,    0,    0,    0, 1294,
     1296, 1304,    0, 1304, 1295, 1296,    0,    0, 1304,    0,
        0,    0,    0, 1304, 1336, 1336, 1336, 1336, 1336, 1337,
        0,    0, 1337, 1337, 1339, 1339, 1339,    0, 1339, 1340,
        0, 1340, 1340, 1340, 1341,    0, 1341, 1341, 1341, 1342,
        0, 1342, 1342, 1342, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3069 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3083 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3370 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1336 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1335 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 168:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
TOKEN(PATHSEP_TRAVERSE)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(PATHSEP_SUBFIELD)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 177:
#line 243 "flex_lexer.l"
case 178:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 179:
YY_RULE_SETUP
#line 253 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 258 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 274 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 280 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 281 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 282 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 283 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 285 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 287 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4396 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1336 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1336 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1335);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 287 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

